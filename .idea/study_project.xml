<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="14" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="The Web is called so for a reason: all these pages are connected to many others through links, resembling a spider’s web. It’s easy to get lost and miss important links, so in this project you will write a program that might help. A Web Crawler collects and saves links from a given page, storing them in the memory for you to access later.&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/59&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="fromZip" value="false" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="JAVA 11" />
          <option name="languageCode" value="en" />
          <option name="name" value="Web Crawler" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="317" />
                <option name="stepId" value="5459" />
                <option name="title" value="Crawl through the window" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="318" />
                <option name="stepId" value="5460" />
                <option name="title" value="Links, links" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="319" />
                <option name="stepId" value="5461" />
                <option name="title" value="Titles" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="320" />
                <option name="stepId" value="5462" />
                <option name="title" value="Collect them all!" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="321" />
                <option name="stepId" value="5463" />
                <option name="title" value="Save the results" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="322" />
                <option name="stepId" value="5464" />
                <option name="title" value="Complicated matters" />
              </HyperskillStage>
            </list>
          </option>
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="259" />
                      <option name="theoryId" value="3805" />
                      <option name="title" value="IDE" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="1">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="60" />
                      <option name="theoryId" value="3497" />
                      <option name="title" value="What is an exception" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="59" />
                      <option name="theoryId" value="3570" />
                      <option name="title" value="Hierarchy of exceptions" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="65" />
                      <option name="theoryId" value="3552" />
                      <option name="title" value="Exception handling" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="163" />
                      <option name="theoryId" value="3536" />
                      <option name="title" value="Errors in programs" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="178" />
                      <option name="theoryId" value="3670" />
                      <option name="title" value="Regex basics" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="180" />
                      <option name="theoryId" value="3674" />
                      <option name="title" value="Sets, ranges, alternations" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="181" />
                      <option name="theoryId" value="3680" />
                      <option name="title" value="Shorthands" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="182" />
                      <option name="theoryId" value="3687" />
                      <option name="title" value="Quantifiers" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="183" />
                      <option name="theoryId" value="3696" />
                      <option name="title" value="Regexes in programs" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="185" />
                      <option name="theoryId" value="3712" />
                      <option name="title" value="Patterns and Matcher" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="186" />
                      <option name="theoryId" value="3716" />
                      <option name="title" value="Match results" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="3">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="167" />
                      <option name="theoryId" value="3492" />
                      <option name="title" value="Generic programming" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="43" />
                      <option name="theoryId" value="3591" />
                      <option name="title" value="Basics of collections" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="40" />
                      <option name="theoryId" value="3575" />
                      <option name="title" value="Set" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="46" />
                      <option name="theoryId" value="3558" />
                      <option name="title" value="Map" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="4" />
                      <option name="theoryId" value="3511" />
                      <option name="title" value="Array" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="97" />
                      <option name="theoryId" value="3602" />
                      <option name="title" value="Iterating over arrays" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="12" />
                      <option name="theoryId" value="1933" />
                      <option name="title" value="Multi-dimensional array" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="6" />
                      <option name="theoryId" value="3595" />
                      <option name="title" value="Boxing &amp;&amp; unboxing" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="4">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="172" />
                      <option name="theoryId" value="3635" />
                      <option name="title" value="Files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="177" />
                      <option name="theoryId" value="3652" />
                      <option name="title" value="Writing files" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="5">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="62" />
                      <option name="theoryId" value="3600" />
                      <option name="title" value="Basics of multithreading" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="295" />
                      <option name="theoryId" value="4875" />
                      <option name="title" value="Threads as objects" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="294" />
                      <option name="theoryId" value="4876" />
                      <option name="title" value="Custom threads" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="72" />
                      <option name="theoryId" value="3619" />
                      <option name="title" value="Thread management" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="297" />
                      <option name="theoryId" value="4882" />
                      <option name="title" value="Exceptions in threads" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="77" />
                      <option name="theoryId" value="3610" />
                      <option name="title" value="Working with shared data and problems" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="86" />
                      <option name="theoryId" value="3557" />
                      <option name="title" value="Thread synchronization" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="42" />
                      <option name="theoryId" value="3581" />
                      <option name="title" value="List" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="197" />
                      <option name="theoryId" value="3770" />
                      <option name="title" value="What are collections" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="166" />
                      <option name="theoryId" value="3567" />
                      <option name="title" value="ArrayList" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="304" />
                      <option name="theoryId" value="4984" />
                      <option name="title" value="Collections and thread-safety" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="The Web is called so for a reason: all these pages are connected to many others through links, resembling a spider’s web. It’s easy to get lost and miss important links, so in this project you will write a program that might help. A Web Crawler collects and saves links from a given page, storing them in the memory for you to access later." />
              <option name="id" value="59" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/210080/additional_files.json" />
              <option name="language" value="java" />
              <option name="title" value="Web Crawler" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="0" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Web Crawler" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Let's begin implementing the bot.&lt;/p&gt;&#10;&#10;&lt;p&gt;In Swing, the class that represents an empty window is &lt;code&gt;JFrame&lt;/code&gt;. Actually, all of the classes that represent graphic elements in Swing start with the letter &lt;code&gt;J&lt;/code&gt;. Don't confuse these classes with classes that represent graphic elements of the AWT library (for example, the class &lt;code&gt;Button&lt;/code&gt; in the AWT library versus the class &lt;code&gt;JButton&lt;/code&gt; in the Swing library).&lt;/p&gt;&#10;&#10;&lt;p&gt;To improve the basic window, you should extend &lt;code&gt;JFrame&lt;/code&gt; class and write your own logic for the window. Let's see this code below in the constructor of &lt;code&gt;SimpleWindow&lt;/code&gt; class that extends &lt;code&gt;JFrame&lt;/code&gt;:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;setSize(300, 300);&#10;setVisible(true);&#10;setLayout(null);&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Without the first line, if you close the program, your program would be still running, and after that, you can only kill it using the task manager or the IDE (if you are running it under an IDE).&lt;/p&gt;&#10;&#10;&lt;p&gt;The second line sets the size of the window. Without it, the program would be 0 pixels in width and height. Of course, nothing can fit in this window size. And if you run the program, you would see nothing because the window is invisible by default. The third line fixes this. The fourth line means that there won't be any strategy for placing the elements on the screen. You can place components on the window using absolute coordinates and bounds.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can place any component anywhere using &lt;code&gt;component.setLocation(int x , int y)&lt;/code&gt; and &lt;code&gt;component.setSize(int width, int height)&lt;/code&gt;. If you want to change both the size and the location of the component, you may want to use &lt;code&gt;component.setBounds(int x, int y, int width, int height)&lt;/code&gt;. To add a Swing component to the window, you need to invoke the add method and pass the component as a parameter. For example: &lt;code&gt;add(component)&lt;/code&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;Also, you can use the method &lt;code&gt;setTitle&lt;/code&gt; to set the name of the window.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can find the list of components &lt;a href=&quot;http://zetcode.com/tutorials/javaswingtutorial/basicswingcomponents/&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://zetcode.com/tutorials/javaswingtutorial/basicswingcomponentsII/&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;. In this stage, you need to use the most suitable component for displaying a web page code: &lt;code&gt;JTextArea&lt;/code&gt;. For now, place a static text into the &lt;code&gt;JTextArea&lt;/code&gt; and make it disabled.&lt;/p&gt;&#10;&#10;&lt;p&gt;Send the link to your pull request on GitHub with the solution after each stage of this project.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Testing requirements&lt;/h2&gt;&#10;&#10;&lt;p&gt;For the testing reasons, you need to set the name of each component using the method &lt;code&gt;component.setName(String name)&lt;/code&gt;.&lt;br&gt;&#10;    On this stage, please provide the following components:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;code&gt;JTextArea&lt;/code&gt; &quot;TextArea&quot;.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below there is the example of how your basic window might look:&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/4d430eef-c80b-454e-ac1f-07c145e3445b/&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/59/stages/317/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5459" />
                      <option name="index" value="1" />
                      <option name="name" value="Crawl through the window" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/crawler/ApplicationRunner.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/crawler/ApplicationRunner.java" />
                                <option name="text" value="package crawler;&#10;&#10;&#10;public class ApplicationRunner {&#10;    public static void main(String[] args) {&#10;        new WebCrawler();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/crawler/WebCrawler.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/crawler/WebCrawler.java" />
                                <option name="text" value="package crawler;&#10;&#10;import javax.swing.*;&#10;&#10;public class WebCrawler extends JFrame {&#10;    public WebCrawler() {&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setSize(300, 300);&#10;        setVisible(true);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/CrawlerTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/CrawlerTest.java" />
                                <option name="text" value="import common.WebCrawlerStage1Test;&#10;&#10;public class CrawlerTest extends WebCrawlerStage1Test {&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerCommonTestGenerator.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerCommonTestGenerator.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.AbstractJComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;import javax.swing.JFrame&#10;&#10;fun frameTests(frameGetter: () -&gt; JFrame): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;Window is not visible&quot;) { frameGetter().isVisible.toCheckResult() },&#10;        createWebCrawlerTest(&quot;Window title is empty&quot;) { frameGetter().title.isNotEmpty().toCheckResult() }&#10;    )&#10;}&#10;&#10;class ComponentRequirements&lt;ComponentType : AbstractJComponentFixture&lt;*, *, *&gt;&gt;(&#10;    val name: String,&#10;    val isEnabled: Boolean,&#10;    private val componentFinder: (String) -&gt; ComponentType?&#10;) {&#10;    val suitableComponent: ComponentType? by lazy { componentFinder(name) }&#10;}&#10;&#10;fun existenceTests(vararg components: ComponentRequirements&lt;*&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    fun generateExistenceTest(requirements: ComponentRequirements&lt;*&gt;): TestCase&lt;WebCrawlerClue&gt; {&#10;        return createWebCrawlerTest(&quot;No suitable component '${requirements.name}' is found&quot;) {&#10;            SwingTest.checkExistence { requirements.suitableComponent }.toCheckResult()&#10;        }&#10;    }&#10;&#10;    return components.map(::generateExistenceTest)&#10;}&#10;&#10;fun componentsAreEnabledTests(vararg components: ComponentRequirements&lt;*&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    fun generateIsEnabledTest(requirements: ComponentRequirements&lt;*&gt;): TestCase&lt;WebCrawlerClue&gt; {&#10;        return if (requirements.isEnabled) {&#10;            createWebCrawlerTest(&quot;'${requirements.name}' should be enabled&quot;) {&#10;                val component = requireNotNull(requirements.suitableComponent) {&#10;                    &quot;Should check for the component existence before&quot;&#10;                }&#10;&#10;                return@createWebCrawlerTest component.isEnabled.toCheckResult()&#10;            }&#10;        } else {&#10;            createWebCrawlerTest(&quot;'${requirements.name}' should be disabled&quot;) {&#10;                val component = requireNotNull(requirements.suitableComponent) {&#10;                    &quot;Should check for the component existence before&quot;&#10;                }&#10;&#10;                return@createWebCrawlerTest (!component.isEnabled).toCheckResult()&#10;            }&#10;        }&#10;    }&#10;&#10;    return components.map(::generateIsEnabledTest)&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerLocalhostPages.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerLocalhostPages.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v4.mocks.web.WebPage&#10;import org.hyperskill.hstest.v4.mocks.web.WebServerMock&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;fun &lt;AttachType&gt; TestCase&lt;AttachType&gt;.withLocalhostPagesOn(port: Int): TestCase&lt;AttachType&gt; {&#10;    val webServerMock = WebServerMock(port).apply {&#10;        pages.forEach { _, (_, content, relativeUrl) -&gt;&#10;            setPage(relativeUrl,&#10;                    WebPage().setContent(content).setContentType(&quot;text/html&quot;)) }&#10;    }&#10;&#10;    return this.runWith(webServerMock)&#10;}&#10;&#10;data class PageProperties(val title: String, val content: String, val relativePath: String, val childUrls: Set&lt;String&gt;)&#10;&#10;val pages = mapOf(&#10;    localhost(PORT, &quot;/exampleDotCom&quot;) to PageProperties(&#10;        &quot;Example Domain&quot;,&#10;        &quot;&quot;&quot;&lt;!doctype html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Example Domain&lt;/title&gt;&#10;&#10;    &lt;meta charset=&quot;utf-8&quot; /&gt;&#10;    &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;&#10;    &lt;style type=&quot;text/css&quot;&gt;&#10;    body {&#10;        background-color: #f0f0f2;&#10;        margin: 0;&#10;        padding: 0;&#10;        font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;&#10;&#10;    }&#10;    div {&#10;        width: 600px;&#10;        margin: 5em auto;&#10;        padding: 50px;&#10;        background-color: #fff;&#10;        border-radius: 1em;&#10;    }&#10;    a:link, a:visited {&#10;        color: #38488f;&#10;        text-decoration: none;&#10;    }&#10;    @media (max-width: 700px) {&#10;        body {&#10;            background-color: #fff;&#10;        }&#10;        div {&#10;            width: auto;&#10;            margin: 0 auto;&#10;            border-radius: 0;&#10;            padding: 1em;&#10;        }&#10;    }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;&lt;div&gt;&#10;    &lt;h1&gt;Example of Example Domain&lt;/h1&gt;&#10;    &lt;p&gt;This domain is established to be used for illustrative examples in documents. You may use this&#10;    domain in examples without prior coordination or asking for permission.&lt;/p&gt;&#10;    &lt;p&gt;&lt;a href=&quot;unavailablePage&quot;&gt;More information...&lt;/a&gt;&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&quot;&quot;&quot;,&#10;        &quot;/exampleDotCom&quot;,&#10;        setOf(localhost(PORT, &quot;/unavailablePage&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular1&quot;) to PageProperties(&#10;        &quot;circular1tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular1tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular2&quot;&gt;link1&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular1&quot;,&#10;        setOf(localhost(PORT, &quot;/circular2&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular2&quot;) to PageProperties(&#10;        &quot;circular2tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular2tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular3&quot;&gt;link1&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular2&quot;,&#10;        setOf(localhost(PORT, &quot;/circular3&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular3&quot;) to PageProperties(&#10;        &quot;circular3tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular3tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular1&quot;&gt;link&lt;/a&gt;&#10;            |&lt;a href=&quot;exampleDotCom&quot;&gt;link&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular3&quot;,&#10;        setOf(localhost(PORT, &quot;/circular1&quot;), localhost(PORT, &quot;/exampleDotCom&quot;))&#10;    )&#10;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage1Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage1Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage1Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val textArea = ComponentRequirements(&quot;TextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(textArea) +&#10;                componentsAreEnabledTests(textArea) +&#10;                stage1Tests(textAreaRequirements = textArea)&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage1Tests(textAreaRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;'${textAreaRequirements.name}' should contain text 'HTML code?'&quot;) {&#10;            val textArea = textAreaRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest (&quot;html code?&quot; in textArea.text()?.toLowerCase().orEmpty()).toCheckResult()&#10;        }&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage2Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage2Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage2Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val htmlText = ComponentRequirements(&quot;HtmlTextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(htmlText, urlText, getButton) +&#10;                componentsAreEnabledTests(htmlText, urlText, getButton) +&#10;                stage2Tests(&#10;                    htmlTextAreaRequirements = htmlText,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage2Tests(&#10;    htmlTextAreaRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;HTML code your app shows is wrong&quot;) {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val htmlTextArea = htmlTextAreaRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest pages&#10;                .asSequence()&#10;                .map { (url, pageProperties) -&gt;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    val textInTextArea = htmlTextArea.text().orEmpty()&#10;&#10;                    return@map htmlTextsAreEqual(pageProperties.content, textInTextArea)&#10;                }&#10;                .all { it }&#10;                .toCheckResult()&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage3Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage3Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JLabelFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.common.Utils.sleep&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage3Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val htmlText = ComponentRequirements(&quot;HtmlTextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(htmlText, urlText, getButton, titleLabel) +&#10;                componentsAreEnabledTests(htmlText, urlText, getButton, titleLabel) +&#10;                stage2Tests(&#10;                    htmlTextAreaRequirements = htmlText,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage3Tests(&#10;    titleLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;Title your app shows is wrong&quot;) {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val titleLabel = titleLabelRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest pages&#10;                .asSequence()&#10;                .map { (url, pageProperties) -&gt;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    sleep(100)&#10;&#10;                    val titleInLabel = titleLabel.text().orEmpty()&#10;&#10;                    return@map titleInLabel == pageProperties.title&#10;                }&#10;                .all { it }&#10;                .toCheckResult()&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage4Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage4Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JTableFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.common.Utils.sleep&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage4Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val titlesTable = ComponentRequirements(&quot;TitlesTable&quot;, isEnabled = false) { window.table(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(titlesTable, urlText, getButton, titleLabel) +&#10;                componentsAreEnabledTests(titlesTable, urlText, getButton, titleLabel) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage4Tests(&#10;                    titlesTableRequirements = titlesTable,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage4Tests(&#10;    titlesTableRequirements: ComponentRequirements&lt;JTableFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val titleTable = titlesTableRequirements.requireExistingComponent()&#10;&#10;            for (url in pages.keys) {&#10;                locationTextField.setText(url)&#10;&#10;                getTextButton.click()&#10;&#10;                sleep(100)&#10;&#10;                val contents = titleTable.contents()&#10;&#10;                if (contents.any { it.size != 2 }) {&#10;                    return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong columns number&quot;)&#10;                }&#10;&#10;                if (contents.size != url.deepUrls(depth = 1).size) {&#10;                    return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong rows number&quot; +&#10;                            &quot; have ${contents.size} should ${ url.deepUrls(depth = 1).size}&quot;)&#10;                }&#10;&#10;                for ((writtenUrl, writtenTitle) in contents) {&#10;                    if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                        return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong row&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            return@createWebCrawlerTest CheckResult(true)&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage5Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage5Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.*&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;import java.io.File&#10;&#10;abstract class WebCrawlerStage5Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val titlesTable = ComponentRequirements(&quot;TitlesTable&quot;, isEnabled = false) { window.table(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;        val saveButton = ComponentRequirements(&quot;ExportButton&quot;, isEnabled = true) { window.button(it) }&#10;        val pathToFileText = ComponentRequirements(&quot;ExportUrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +&#10;                componentsAreEnabledTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage4Tests(&#10;                    titlesTableRequirements = titlesTable,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage5Tests(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depth = 1&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage5Tests(&#10;    saveButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    savePathTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    depthTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;? = null,&#10;    depthCheckBoxRequirements: ComponentRequirements&lt;JCheckBoxFixture&gt;? = null,&#10;    parsedLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;? = null,&#10;    depth: Int&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val saveButton = saveButtonRequirements.requireExistingComponent()&#10;            val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()&#10;&#10;            val depthTextField = depthTextFieldRequirements?.requireExistingComponent()&#10;            val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()&#10;            val parsedLabel = parsedLabelRequirements?.requireExistingComponent()&#10;&#10;            for (url in pages.keys) {&#10;                depthTextField?.setText(&quot;$depth&quot;)&#10;                depthCheckBox?.enable()&#10;&#10;                locationTextField.setText(url)&#10;&#10;                getTextButton.click()&#10;&#10;                val fileName = File(&quot;&quot;).absolutePath + &quot;/temp.log&quot;&#10;&#10;                savePathTextField.setText(fileName)&#10;&#10;                saveButton.click()&#10;&#10;                val file = File(fileName)&#10;&#10;                if (!file.exists()) {&#10;                    return@createWebCrawlerTest fail(&quot;Your app doesn't create a file&quot;)&#10;                }&#10;&#10;                val contents = file.readText().lines().chunked(2).filter { it.size == 2 }&#10;                val deepUrls = url.deepUrls(depth)&#10;&#10;                if (contents.size != deepUrls.size) {&#10;                    return@createWebCrawlerTest fail(&quot;File your app saves has a wrong lines number&quot;)&#10;                }&#10;&#10;                if (contents.map { it.first() }.toSet() != deepUrls) {&#10;                    return@createWebCrawlerTest fail(&quot;File your app saves has a wrong child url&quot;)&#10;                }&#10;&#10;                for ((writtenUrl, writtenTitle) in contents) {&#10;                    if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong pair of lines&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            return@createWebCrawlerTest CheckResult(true)&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;&#10;// TODO: Code duplicate!&#10;fun stage5TestsWithJToggleButton(&#10;    saveButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JToggleButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    savePathTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    depthTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;? = null,&#10;    depthCheckBoxRequirements: ComponentRequirements&lt;JCheckBoxFixture&gt;? = null,&#10;    parsedLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;? = null,&#10;    depth: Int&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;            createWebCrawlerTest {&#10;                val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;                val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;                val saveButton = saveButtonRequirements.requireExistingComponent()&#10;                val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()&#10;&#10;                val depthTextField = depthTextFieldRequirements?.requireExistingComponent()&#10;                val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()&#10;                val parsedLabel = parsedLabelRequirements?.requireExistingComponent()&#10;&#10;                for (url in pages.keys) {&#10;                    depthTextField?.setText(&quot;$depth&quot;)&#10;                    depthCheckBox?.enable()&#10;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    val fileName = File(&quot;&quot;).absolutePath + &quot;/temp.log&quot;&#10;&#10;                    savePathTextField.setText(fileName)&#10;&#10;                    saveButton.click()&#10;&#10;                    val file = File(fileName)&#10;&#10;                    if (!file.exists()) {&#10;                        return@createWebCrawlerTest fail(&quot;Your app doesn't create a file&quot;)&#10;                    }&#10;&#10;                    val contents = file.readText().lines().chunked(2).filter { it.size == 2 }&#10;                    val deepUrls = url.deepUrls(depth)&#10;&#10;                    if (contents.size != deepUrls.size) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong lines number&quot;)&#10;                    }&#10;&#10;                    if (contents.map { it.first() }.toSet() != deepUrls) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong child url&quot;)&#10;                    }&#10;&#10;                    val parsedCount = parsedLabel?.text()?.toIntOrNull()&#10;&#10;                    if (parsedCount != deepUrls.size) {&#10;                        return@createWebCrawlerTest fail(&quot;Parsed pages number your app shows is wrong&quot;)&#10;                    }&#10;&#10;                    for ((writtenUrl, writtenTitle) in contents) {&#10;                        if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                            return@createWebCrawlerTest fail(&quot;File your app saves has a wrong pair of lines&quot;)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                return@createWebCrawlerTest CheckResult(true)&#10;            }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage6Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage6Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage6Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.toggleButton(it) }&#10;        val saveButton = ComponentRequirements(&quot;ExportButton&quot;, isEnabled = true) { window.button(it) }&#10;        val pathToFileText = ComponentRequirements(&quot;ExportUrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;&#10;        val depthText = ComponentRequirements(&quot;DepthTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val depthCheckBox = ComponentRequirements(&quot;DepthCheckBox&quot;, isEnabled = true) { window.checkBox(it) }&#10;        val parsedLabel = ComponentRequirements(&quot;ParsedLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(urlText, getButton, saveButton, pathToFileText, depthText, depthCheckBox, parsedLabel) +&#10;                componentsAreEnabledTests(&#10;                    urlText,&#10;                    getButton,&#10;                    saveButton,&#10;                    pathToFileText,&#10;                    depthText,&#10;                    depthCheckBox,&#10;                    parsedLabel&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 1&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 2&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 100500&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerUtil.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerUtil.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.AbstractJComponentFixture&#10;import org.assertj.swing.fixture.JCheckBoxFixture&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;const val PORT = 25555  // TODO: maybe use another port?&#10;&#10;class WebCrawlerClue(val feedback: String?, val checker: () -&gt; CheckResult)&#10;&#10;fun createWebCrawlerTest(feedback: String? = null, checker: () -&gt; CheckResult): TestCase&lt;WebCrawlerClue&gt; {&#10;    return TestCase&lt;WebCrawlerClue&gt;()&#10;        .setAttach(&#10;            WebCrawlerClue(&#10;                feedback = feedback,&#10;                checker = checker&#10;            )&#10;        )&#10;}&#10;&#10;fun checkWebCrawlerTest(reply: String, clue: WebCrawlerClue): CheckResult {&#10;    return try {&#10;        val (result, feedback) = clue.checker()&#10;&#10;        CheckResult(result, clue.feedback ?: feedback)&#10;    } catch (e: AssertionError) {&#10;        CheckResult(false, clue.feedback)&#10;    }&#10;}&#10;&#10;private operator fun CheckResult.component1() = isCorrect&#10;private operator fun CheckResult.component2() = feedback&#10;&#10;fun Boolean.toCheckResult() = CheckResult(this)&#10;&#10;fun fail(message: String) = CheckResult(false, message)&#10;&#10;fun htmlTextsAreEqual(source: String, inTextField: String): Boolean {&#10;    fun String.formatted(): String {&#10;        return this.trim().replace(&quot;\r\n&quot;, &quot;\n&quot;).replace(&quot;\r&quot;, &quot;\n&quot;)&#10;    }&#10;&#10;    return source.formatted() == inTextField.formatted()&#10;}&#10;&#10;fun &lt;ComponentType : AbstractJComponentFixture&lt;*, *, *&gt;&gt; ComponentRequirements&lt;ComponentType&gt;.requireExistingComponent(): ComponentType {&#10;    return requireNotNull(this.suitableComponent) {&#10;        &quot;Must check for the '${this.name}' component existence before this test&quot;&#10;    }&#10;}&#10;&#10;fun localhost(port: Int, url: String) = &quot;http://localhost:$port$url&quot;&#10;&#10;fun String.deepUrls(depth: Int): Set&lt;String&gt; {&#10;    fun String.childrenOrEmpty(): Set&lt;String&gt; {&#10;        val pageProperties = pages[this]&#10;&#10;        if (depth &lt; 0 || pageProperties == null) {&#10;            return emptySet()&#10;        }&#10;&#10;        return pageProperties.childUrls.filter { it in pages }.toSet()&#10;    }&#10;&#10;    var remainingDepth = depth - 1&#10;    val answer = this.childrenOrEmpty().toMutableSet()&#10;    while (remainingDepth &gt; 0) {&#10;        val next = answer.flatMap { it.childrenOrEmpty() } - answer&#10;&#10;        if (next.isEmpty()) {&#10;            break&#10;        }&#10;&#10;        answer.addAll(next)&#10;&#10;        --remainingDepth&#10;    }&#10;&#10;    return answer&#10;}&#10;&#10;fun JCheckBoxFixture.enable() {&#10;    if (!this.isEnabled) {&#10;        this.click()&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1559843055000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Now let's download a source code of the given web page.&lt;/p&gt;&#10;&#10;&lt;p&gt;Rename your &lt;code&gt;SimpleWindow&lt;/code&gt; class to &lt;code&gt;WebCrawlerWindow&lt;/code&gt; (you can do it fast: click the right mouse button on the &lt;code&gt;SimpleWindow&lt;/code&gt; class, then choose &quot;Refactor&quot; - &quot;Rename&quot;, and the class will be renamed everywhere).&lt;/p&gt;&#10;&#10;&lt;p&gt;Next, add two components to the frame: a &lt;code&gt;JTextField&lt;/code&gt; for the target site URL and a &lt;code&gt;JButton&lt;/code&gt; launching download.&lt;/p&gt;&#10;&#10;&lt;p&gt;And how to download a web page?&lt;/p&gt;&#10;&#10;&lt;p&gt;There are standard Java classes.&lt;/p&gt;&#10;&#10;&lt;p&gt;Here is an algorithm downloading a web page text:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;final String url = /* Get url from JTextField */;&#10;&#10;final InputStream inputStream = new URL(url).openStream();&#10;final BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));&#10;final StringBuilder stringBuilder = new StringBuilder();&#10;&#10;String nextLine;&#10;while ((nextLine = reader.readLine()) != null) {&#10;    stringBuilder.append(nextLine);&#10;    stringBuilder.append(LINE_SEPARATOR);&#10;}&#10;&#10;final String siteText = stringBuilder.toString();&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;ol&gt;&#10;    &lt;li&gt;Firstly, the link is stored in the &lt;code&gt;url&lt;/code&gt; variable.&lt;/li&gt;&#10;    &lt;li&gt;Then the input stream is created.&lt;/li&gt;&#10;    &lt;li&gt;After that, there is a creation of the stream reader: we specify the most common charset here.&lt;/li&gt;&#10;    &lt;li&gt;Then the reader reads the site text line-by-line to the &lt;code&gt;StringBuilder&lt;/code&gt; (it has a faster appending performance compared to simple string concatenation).&lt;/li&gt;&#10;    &lt;li&gt;Finally, the &lt;code&gt;StringBuilder&lt;/code&gt; saves the site text to a single string.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;Please note that this algorithm requires some more code.&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;You need to import &lt;code&gt;java.io.*&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt; and &lt;code&gt;java.nio.charset.StandardCharsets&lt;/code&gt;.&lt;/li&gt;&#10;    &lt;li&gt;Line separator can be retrieved by &lt;code&gt;LINE_SEPARATOR = System.getProperty(&quot;line.separator&quot;)&lt;/code&gt;.&lt;/li&gt;&#10;    &lt;li&gt;The code should be placed into &lt;code&gt;try-catch&lt;/code&gt; construction to handle checked exceptions.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Testing requirements&lt;/h2&gt;&#10;&#10;&lt;p&gt;For the testing reasons, you need to set the name of each component using the method &lt;code&gt;component.setName(String name)&lt;/code&gt;.&lt;br&gt;&#10;    On this stage, please provide the following components:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt; &quot;UrlTextField&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JButton&lt;/code&gt; &quot;RunButton&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JTextArea&lt;/code&gt; &quot;HtmlTextArea&quot;.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below there is the example of how your window might look:&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/2774d6df-8485-4675-b5e1-112d6a650929/&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/59/stages/318/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5460" />
                      <option name="index" value="2" />
                      <option name="name" value="Links, links" />
                      <option name="record" value="2" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="test/CrawlerTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/CrawlerTest.java" />
                                <option name="text" value="import common.WebCrawlerStage2Test;&#10;&#10;public class CrawlerTest extends WebCrawlerStage2Test {&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerCommonTestGenerator.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerCommonTestGenerator.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.AbstractJComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;import javax.swing.JFrame&#10;&#10;fun frameTests(frameGetter: () -&gt; JFrame): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;Window is not visible&quot;) { frameGetter().isVisible.toCheckResult() },&#10;        createWebCrawlerTest(&quot;Window title is empty&quot;) { frameGetter().title.isNotEmpty().toCheckResult() }&#10;    )&#10;}&#10;&#10;class ComponentRequirements&lt;ComponentType : AbstractJComponentFixture&lt;*, *, *&gt;&gt;(&#10;    val name: String,&#10;    val isEnabled: Boolean,&#10;    private val componentFinder: (String) -&gt; ComponentType?&#10;) {&#10;    val suitableComponent: ComponentType? by lazy { componentFinder(name) }&#10;}&#10;&#10;fun existenceTests(vararg components: ComponentRequirements&lt;*&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    fun generateExistenceTest(requirements: ComponentRequirements&lt;*&gt;): TestCase&lt;WebCrawlerClue&gt; {&#10;        return createWebCrawlerTest(&quot;No suitable component '${requirements.name}' is found&quot;) {&#10;            SwingTest.checkExistence { requirements.suitableComponent }.toCheckResult()&#10;        }&#10;    }&#10;&#10;    return components.map(::generateExistenceTest)&#10;}&#10;&#10;fun componentsAreEnabledTests(vararg components: ComponentRequirements&lt;*&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    fun generateIsEnabledTest(requirements: ComponentRequirements&lt;*&gt;): TestCase&lt;WebCrawlerClue&gt; {&#10;        return if (requirements.isEnabled) {&#10;            createWebCrawlerTest(&quot;'${requirements.name}' should be enabled&quot;) {&#10;                val component = requireNotNull(requirements.suitableComponent) {&#10;                    &quot;Should check for the component existence before&quot;&#10;                }&#10;&#10;                return@createWebCrawlerTest component.isEnabled.toCheckResult()&#10;            }&#10;        } else {&#10;            createWebCrawlerTest(&quot;'${requirements.name}' should be disabled&quot;) {&#10;                val component = requireNotNull(requirements.suitableComponent) {&#10;                    &quot;Should check for the component existence before&quot;&#10;                }&#10;&#10;                return@createWebCrawlerTest (!component.isEnabled).toCheckResult()&#10;            }&#10;        }&#10;    }&#10;&#10;    return components.map(::generateIsEnabledTest)&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerLocalhostPages.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerLocalhostPages.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v4.mocks.web.WebPage&#10;import org.hyperskill.hstest.v4.mocks.web.WebServerMock&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;fun &lt;AttachType&gt; TestCase&lt;AttachType&gt;.withLocalhostPagesOn(port: Int): TestCase&lt;AttachType&gt; {&#10;    val webServerMock = WebServerMock(port).apply {&#10;        pages.forEach { _, (_, content, relativeUrl) -&gt;&#10;            setPage(relativeUrl,&#10;                    WebPage().setContent(content).setContentType(&quot;text/html&quot;)) }&#10;    }&#10;&#10;    return this.runWith(webServerMock)&#10;}&#10;&#10;data class PageProperties(val title: String, val content: String, val relativePath: String, val childUrls: Set&lt;String&gt;)&#10;&#10;val pages = mapOf(&#10;    localhost(PORT, &quot;/exampleDotCom&quot;) to PageProperties(&#10;        &quot;Example Domain&quot;,&#10;        &quot;&quot;&quot;&lt;!doctype html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Example Domain&lt;/title&gt;&#10;&#10;    &lt;meta charset=&quot;utf-8&quot; /&gt;&#10;    &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;&#10;    &lt;style type=&quot;text/css&quot;&gt;&#10;    body {&#10;        background-color: #f0f0f2;&#10;        margin: 0;&#10;        padding: 0;&#10;        font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;&#10;&#10;    }&#10;    div {&#10;        width: 600px;&#10;        margin: 5em auto;&#10;        padding: 50px;&#10;        background-color: #fff;&#10;        border-radius: 1em;&#10;    }&#10;    a:link, a:visited {&#10;        color: #38488f;&#10;        text-decoration: none;&#10;    }&#10;    @media (max-width: 700px) {&#10;        body {&#10;            background-color: #fff;&#10;        }&#10;        div {&#10;            width: auto;&#10;            margin: 0 auto;&#10;            border-radius: 0;&#10;            padding: 1em;&#10;        }&#10;    }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;&lt;div&gt;&#10;    &lt;h1&gt;Example of Example Domain&lt;/h1&gt;&#10;    &lt;p&gt;This domain is established to be used for illustrative examples in documents. You may use this&#10;    domain in examples without prior coordination or asking for permission.&lt;/p&gt;&#10;    &lt;p&gt;&lt;a href=&quot;unavailablePage&quot;&gt;More information...&lt;/a&gt;&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&quot;&quot;&quot;,&#10;        &quot;/exampleDotCom&quot;,&#10;        setOf(localhost(PORT, &quot;/unavailablePage&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular1&quot;) to PageProperties(&#10;        &quot;circular1tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular1tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular2&quot;&gt;link1&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular1&quot;,&#10;        setOf(localhost(PORT, &quot;/circular2&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular2&quot;) to PageProperties(&#10;        &quot;circular2tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular2tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular3&quot;&gt;link1&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular2&quot;,&#10;        setOf(localhost(PORT, &quot;/circular3&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular3&quot;) to PageProperties(&#10;        &quot;circular3tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular3tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular1&quot;&gt;link&lt;/a&gt;&#10;            |&lt;a href=&quot;exampleDotCom&quot;&gt;link&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular3&quot;,&#10;        setOf(localhost(PORT, &quot;/circular1&quot;), localhost(PORT, &quot;/exampleDotCom&quot;))&#10;    )&#10;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage1Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage1Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage1Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val textArea = ComponentRequirements(&quot;TextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(textArea) +&#10;                componentsAreEnabledTests(textArea) +&#10;                stage1Tests(textAreaRequirements = textArea)&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage1Tests(textAreaRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;'${textAreaRequirements.name}' should contain text 'HTML code?'&quot;) {&#10;            val textArea = textAreaRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest (&quot;html code?&quot; in textArea.text()?.toLowerCase().orEmpty()).toCheckResult()&#10;        }&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage2Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage2Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage2Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val htmlText = ComponentRequirements(&quot;HtmlTextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(htmlText, urlText, getButton) +&#10;                componentsAreEnabledTests(htmlText, urlText, getButton) +&#10;                stage2Tests(&#10;                    htmlTextAreaRequirements = htmlText,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage2Tests(&#10;    htmlTextAreaRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;HTML code your app shows is wrong&quot;) {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val htmlTextArea = htmlTextAreaRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest pages&#10;                .asSequence()&#10;                .map { (url, pageProperties) -&gt;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    val textInTextArea = htmlTextArea.text().orEmpty()&#10;&#10;                    return@map htmlTextsAreEqual(pageProperties.content, textInTextArea)&#10;                }&#10;                .all { it }&#10;                .toCheckResult()&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage3Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage3Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JLabelFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.common.Utils.sleep&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage3Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val htmlText = ComponentRequirements(&quot;HtmlTextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(htmlText, urlText, getButton, titleLabel) +&#10;                componentsAreEnabledTests(htmlText, urlText, getButton, titleLabel) +&#10;                stage2Tests(&#10;                    htmlTextAreaRequirements = htmlText,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage3Tests(&#10;    titleLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;Title your app shows is wrong&quot;) {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val titleLabel = titleLabelRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest pages&#10;                .asSequence()&#10;                .map { (url, pageProperties) -&gt;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    sleep(100)&#10;&#10;                    val titleInLabel = titleLabel.text().orEmpty()&#10;&#10;                    return@map titleInLabel == pageProperties.title&#10;                }&#10;                .all { it }&#10;                .toCheckResult()&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage4Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage4Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JTableFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.common.Utils.sleep&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage4Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val titlesTable = ComponentRequirements(&quot;TitlesTable&quot;, isEnabled = false) { window.table(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(titlesTable, urlText, getButton, titleLabel) +&#10;                componentsAreEnabledTests(titlesTable, urlText, getButton, titleLabel) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage4Tests(&#10;                    titlesTableRequirements = titlesTable,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage4Tests(&#10;    titlesTableRequirements: ComponentRequirements&lt;JTableFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val titleTable = titlesTableRequirements.requireExistingComponent()&#10;&#10;            for (url in pages.keys) {&#10;                locationTextField.setText(url)&#10;&#10;                getTextButton.click()&#10;&#10;                sleep(100)&#10;&#10;                val contents = titleTable.contents()&#10;&#10;                if (contents.any { it.size != 2 }) {&#10;                    return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong columns number&quot;)&#10;                }&#10;&#10;                if (contents.size != url.deepUrls(depth = 1).size) {&#10;                    return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong rows number&quot; +&#10;                            &quot; have ${contents.size} should ${ url.deepUrls(depth = 1).size}&quot;)&#10;                }&#10;&#10;                for ((writtenUrl, writtenTitle) in contents) {&#10;                    if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                        return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong row&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            return@createWebCrawlerTest CheckResult(true)&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage5Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage5Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.*&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;import java.io.File&#10;&#10;abstract class WebCrawlerStage5Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val titlesTable = ComponentRequirements(&quot;TitlesTable&quot;, isEnabled = false) { window.table(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;        val saveButton = ComponentRequirements(&quot;ExportButton&quot;, isEnabled = true) { window.button(it) }&#10;        val pathToFileText = ComponentRequirements(&quot;ExportUrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +&#10;                componentsAreEnabledTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage4Tests(&#10;                    titlesTableRequirements = titlesTable,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage5Tests(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depth = 1&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage5Tests(&#10;    saveButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    savePathTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    depthTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;? = null,&#10;    depthCheckBoxRequirements: ComponentRequirements&lt;JCheckBoxFixture&gt;? = null,&#10;    parsedLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;? = null,&#10;    depth: Int&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val saveButton = saveButtonRequirements.requireExistingComponent()&#10;            val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()&#10;&#10;            val depthTextField = depthTextFieldRequirements?.requireExistingComponent()&#10;            val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()&#10;            val parsedLabel = parsedLabelRequirements?.requireExistingComponent()&#10;&#10;            for (url in pages.keys) {&#10;                depthTextField?.setText(&quot;$depth&quot;)&#10;                depthCheckBox?.enable()&#10;&#10;                locationTextField.setText(url)&#10;&#10;                getTextButton.click()&#10;&#10;                val fileName = File(&quot;&quot;).absolutePath + &quot;/temp.log&quot;&#10;&#10;                savePathTextField.setText(fileName)&#10;&#10;                saveButton.click()&#10;&#10;                val file = File(fileName)&#10;&#10;                if (!file.exists()) {&#10;                    return@createWebCrawlerTest fail(&quot;Your app doesn't create a file&quot;)&#10;                }&#10;&#10;                val contents = file.readText().lines().chunked(2).filter { it.size == 2 }&#10;                val deepUrls = url.deepUrls(depth)&#10;&#10;                if (contents.size != deepUrls.size) {&#10;                    return@createWebCrawlerTest fail(&quot;File your app saves has a wrong lines number&quot;)&#10;                }&#10;&#10;                if (contents.map { it.first() }.toSet() != deepUrls) {&#10;                    return@createWebCrawlerTest fail(&quot;File your app saves has a wrong child url&quot;)&#10;                }&#10;&#10;                for ((writtenUrl, writtenTitle) in contents) {&#10;                    if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong pair of lines&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            return@createWebCrawlerTest CheckResult(true)&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;&#10;// TODO: Code duplicate!&#10;fun stage5TestsWithJToggleButton(&#10;    saveButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JToggleButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    savePathTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    depthTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;? = null,&#10;    depthCheckBoxRequirements: ComponentRequirements&lt;JCheckBoxFixture&gt;? = null,&#10;    parsedLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;? = null,&#10;    depth: Int&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;            createWebCrawlerTest {&#10;                val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;                val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;                val saveButton = saveButtonRequirements.requireExistingComponent()&#10;                val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()&#10;&#10;                val depthTextField = depthTextFieldRequirements?.requireExistingComponent()&#10;                val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()&#10;                val parsedLabel = parsedLabelRequirements?.requireExistingComponent()&#10;&#10;                for (url in pages.keys) {&#10;                    depthTextField?.setText(&quot;$depth&quot;)&#10;                    depthCheckBox?.enable()&#10;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    val fileName = File(&quot;&quot;).absolutePath + &quot;/temp.log&quot;&#10;&#10;                    savePathTextField.setText(fileName)&#10;&#10;                    saveButton.click()&#10;&#10;                    val file = File(fileName)&#10;&#10;                    if (!file.exists()) {&#10;                        return@createWebCrawlerTest fail(&quot;Your app doesn't create a file&quot;)&#10;                    }&#10;&#10;                    val contents = file.readText().lines().chunked(2).filter { it.size == 2 }&#10;                    val deepUrls = url.deepUrls(depth)&#10;&#10;                    if (contents.size != deepUrls.size) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong lines number&quot;)&#10;                    }&#10;&#10;                    if (contents.map { it.first() }.toSet() != deepUrls) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong child url&quot;)&#10;                    }&#10;&#10;                    val parsedCount = parsedLabel?.text()?.toIntOrNull()&#10;&#10;                    if (parsedCount != deepUrls.size) {&#10;                        return@createWebCrawlerTest fail(&quot;Parsed pages number your app shows is wrong&quot;)&#10;                    }&#10;&#10;                    for ((writtenUrl, writtenTitle) in contents) {&#10;                        if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                            return@createWebCrawlerTest fail(&quot;File your app saves has a wrong pair of lines&quot;)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                return@createWebCrawlerTest CheckResult(true)&#10;            }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage6Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage6Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage6Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.toggleButton(it) }&#10;        val saveButton = ComponentRequirements(&quot;ExportButton&quot;, isEnabled = true) { window.button(it) }&#10;        val pathToFileText = ComponentRequirements(&quot;ExportUrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;&#10;        val depthText = ComponentRequirements(&quot;DepthTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val depthCheckBox = ComponentRequirements(&quot;DepthCheckBox&quot;, isEnabled = true) { window.checkBox(it) }&#10;        val parsedLabel = ComponentRequirements(&quot;ParsedLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(urlText, getButton, saveButton, pathToFileText, depthText, depthCheckBox, parsedLabel) +&#10;                componentsAreEnabledTests(&#10;                    urlText,&#10;                    getButton,&#10;                    saveButton,&#10;                    pathToFileText,&#10;                    depthText,&#10;                    depthCheckBox,&#10;                    parsedLabel&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 1&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 2&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 100500&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerUtil.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerUtil.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.AbstractJComponentFixture&#10;import org.assertj.swing.fixture.JCheckBoxFixture&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;const val PORT = 25555  // TODO: maybe use another port?&#10;&#10;class WebCrawlerClue(val feedback: String?, val checker: () -&gt; CheckResult)&#10;&#10;fun createWebCrawlerTest(feedback: String? = null, checker: () -&gt; CheckResult): TestCase&lt;WebCrawlerClue&gt; {&#10;    return TestCase&lt;WebCrawlerClue&gt;()&#10;        .setAttach(&#10;            WebCrawlerClue(&#10;                feedback = feedback,&#10;                checker = checker&#10;            )&#10;        )&#10;}&#10;&#10;fun checkWebCrawlerTest(reply: String, clue: WebCrawlerClue): CheckResult {&#10;    return try {&#10;        val (result, feedback) = clue.checker()&#10;&#10;        CheckResult(result, clue.feedback ?: feedback)&#10;    } catch (e: AssertionError) {&#10;        CheckResult(false, clue.feedback)&#10;    }&#10;}&#10;&#10;private operator fun CheckResult.component1() = isCorrect&#10;private operator fun CheckResult.component2() = feedback&#10;&#10;fun Boolean.toCheckResult() = CheckResult(this)&#10;&#10;fun fail(message: String) = CheckResult(false, message)&#10;&#10;fun htmlTextsAreEqual(source: String, inTextField: String): Boolean {&#10;    fun String.formatted(): String {&#10;        return this.trim().replace(&quot;\r\n&quot;, &quot;\n&quot;).replace(&quot;\r&quot;, &quot;\n&quot;)&#10;    }&#10;&#10;    return source.formatted() == inTextField.formatted()&#10;}&#10;&#10;fun &lt;ComponentType : AbstractJComponentFixture&lt;*, *, *&gt;&gt; ComponentRequirements&lt;ComponentType&gt;.requireExistingComponent(): ComponentType {&#10;    return requireNotNull(this.suitableComponent) {&#10;        &quot;Must check for the '${this.name}' component existence before this test&quot;&#10;    }&#10;}&#10;&#10;fun localhost(port: Int, url: String) = &quot;http://localhost:$port$url&quot;&#10;&#10;fun String.deepUrls(depth: Int): Set&lt;String&gt; {&#10;    fun String.childrenOrEmpty(): Set&lt;String&gt; {&#10;        val pageProperties = pages[this]&#10;&#10;        if (depth &lt; 0 || pageProperties == null) {&#10;            return emptySet()&#10;        }&#10;&#10;        return pageProperties.childUrls.filter { it in pages }.toSet()&#10;    }&#10;&#10;    var remainingDepth = depth - 1&#10;    val answer = this.childrenOrEmpty().toMutableSet()&#10;    while (remainingDepth &gt; 0) {&#10;        val next = answer.flatMap { it.childrenOrEmpty() } - answer&#10;&#10;        if (next.isEmpty()) {&#10;            break&#10;        }&#10;&#10;        answer.addAll(next)&#10;&#10;        --remainingDepth&#10;    }&#10;&#10;    return answer&#10;}&#10;&#10;fun JCheckBoxFixture.enable() {&#10;    if (!this.isEnabled) {&#10;        this.click()&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/crawler/ApplicationRunner.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/crawler/ApplicationRunner.java" />
                                <option name="text" value="package crawler;&#10;&#10;&#10;public class ApplicationRunner {&#10;    public static void main(String[] args) {&#10;        new WebCrawler();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/crawler/WebCrawler.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/crawler/WebCrawler.java" />
                                <option name="text" value="package crawler;&#10;&#10;import javax.swing.*;&#10;&#10;public class WebCrawler extends JFrame {&#10;    public WebCrawler() {&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setSize(300, 300);&#10;        setVisible(true);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1559843055000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;As you see on the previous stage, an HTML code contains many symbols &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;. These symbols declare tags. So HTML consists of tags. There are two types of tags:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;Tags-containers like pairs of a start-tag &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; and an end-tag &lt;code&gt;&amp;lt;/title&amp;gt;&lt;/code&gt; (this one is used to set a page title). Usually, there is a content placed inside containers.&lt;/li&gt;&#10;    &lt;li&gt;Empty-element tags like &lt;code&gt;&amp;lt;img src=&quot;LINK&quot; /&amp;gt;&lt;/code&gt; (this one is used for inserting images). The only way to customize these tags is attributes addition.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;Start-tags and empty-element tags can contain attributes. Attributes are pairs of attribute name and attribute value. You see attribute &lt;code&gt;src=&quot;LINK&quot;&lt;/code&gt; in &lt;code&gt;img&lt;/code&gt; tag. It can also be written as &lt;code&gt;src='LINK'&lt;/code&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can read more about HTML for example &lt;a href=&quot;https://en.wikipedia.org/wiki/HTML&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;Implement parsing of the site title. Find the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag in the site text and output it to a special component. You can use a regular expression to catch that simple string.&lt;/p&gt;&#10;&#10;&lt;p&gt;Enhance your window: add some more components.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Testing requirements&lt;/h2&gt;&#10;&#10;&lt;p&gt;For the testing reasons, you need to set the name of each component using the method &lt;code&gt;component.setName(String name)&lt;/code&gt;.&lt;br&gt;&#10;    On this stage, please provide the following components:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt; &quot;UrlTextField&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JButton&lt;/code&gt; &quot;RunButton&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt; &quot;TitleLabel&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JTextArea&lt;/code&gt; &quot;HtmlTextArea&quot;.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below there is the example of how your new window might look. Here site has tag &lt;code&gt;&amp;lt;title&amp;gt;Example Domain&amp;lt;/title&amp;gt;&lt;/code&gt;:&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/485cf860-42fd-4ba3-8b5b-c17dba910b18/&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/59/stages/319/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5461" />
                      <option name="index" value="3" />
                      <option name="name" value="Titles" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="test/CrawlerTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/CrawlerTest.java" />
                                <option name="text" value="import common.WebCrawlerStage3Test;&#10;&#10;public class CrawlerTest extends WebCrawlerStage3Test {&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerCommonTestGenerator.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerCommonTestGenerator.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.AbstractJComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;import javax.swing.JFrame&#10;&#10;fun frameTests(frameGetter: () -&gt; JFrame): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;Window is not visible&quot;) { frameGetter().isVisible.toCheckResult() },&#10;        createWebCrawlerTest(&quot;Window title is empty&quot;) { frameGetter().title.isNotEmpty().toCheckResult() }&#10;    )&#10;}&#10;&#10;class ComponentRequirements&lt;ComponentType : AbstractJComponentFixture&lt;*, *, *&gt;&gt;(&#10;    val name: String,&#10;    val isEnabled: Boolean,&#10;    private val componentFinder: (String) -&gt; ComponentType?&#10;) {&#10;    val suitableComponent: ComponentType? by lazy { componentFinder(name) }&#10;}&#10;&#10;fun existenceTests(vararg components: ComponentRequirements&lt;*&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    fun generateExistenceTest(requirements: ComponentRequirements&lt;*&gt;): TestCase&lt;WebCrawlerClue&gt; {&#10;        return createWebCrawlerTest(&quot;No suitable component '${requirements.name}' is found&quot;) {&#10;            SwingTest.checkExistence { requirements.suitableComponent }.toCheckResult()&#10;        }&#10;    }&#10;&#10;    return components.map(::generateExistenceTest)&#10;}&#10;&#10;fun componentsAreEnabledTests(vararg components: ComponentRequirements&lt;*&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    fun generateIsEnabledTest(requirements: ComponentRequirements&lt;*&gt;): TestCase&lt;WebCrawlerClue&gt; {&#10;        return if (requirements.isEnabled) {&#10;            createWebCrawlerTest(&quot;'${requirements.name}' should be enabled&quot;) {&#10;                val component = requireNotNull(requirements.suitableComponent) {&#10;                    &quot;Should check for the component existence before&quot;&#10;                }&#10;&#10;                return@createWebCrawlerTest component.isEnabled.toCheckResult()&#10;            }&#10;        } else {&#10;            createWebCrawlerTest(&quot;'${requirements.name}' should be disabled&quot;) {&#10;                val component = requireNotNull(requirements.suitableComponent) {&#10;                    &quot;Should check for the component existence before&quot;&#10;                }&#10;&#10;                return@createWebCrawlerTest (!component.isEnabled).toCheckResult()&#10;            }&#10;        }&#10;    }&#10;&#10;    return components.map(::generateIsEnabledTest)&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerLocalhostPages.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerLocalhostPages.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v4.mocks.web.WebPage&#10;import org.hyperskill.hstest.v4.mocks.web.WebServerMock&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;fun &lt;AttachType&gt; TestCase&lt;AttachType&gt;.withLocalhostPagesOn(port: Int): TestCase&lt;AttachType&gt; {&#10;    val webServerMock = WebServerMock(port).apply {&#10;        pages.forEach { _, (_, content, relativeUrl) -&gt;&#10;            setPage(relativeUrl,&#10;                    WebPage().setContent(content).setContentType(&quot;text/html&quot;)) }&#10;    }&#10;&#10;    return this.runWith(webServerMock)&#10;}&#10;&#10;data class PageProperties(val title: String, val content: String, val relativePath: String, val childUrls: Set&lt;String&gt;)&#10;&#10;val pages = mapOf(&#10;    localhost(PORT, &quot;/exampleDotCom&quot;) to PageProperties(&#10;        &quot;Example Domain&quot;,&#10;        &quot;&quot;&quot;&lt;!doctype html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Example Domain&lt;/title&gt;&#10;&#10;    &lt;meta charset=&quot;utf-8&quot; /&gt;&#10;    &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;&#10;    &lt;style type=&quot;text/css&quot;&gt;&#10;    body {&#10;        background-color: #f0f0f2;&#10;        margin: 0;&#10;        padding: 0;&#10;        font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;&#10;&#10;    }&#10;    div {&#10;        width: 600px;&#10;        margin: 5em auto;&#10;        padding: 50px;&#10;        background-color: #fff;&#10;        border-radius: 1em;&#10;    }&#10;    a:link, a:visited {&#10;        color: #38488f;&#10;        text-decoration: none;&#10;    }&#10;    @media (max-width: 700px) {&#10;        body {&#10;            background-color: #fff;&#10;        }&#10;        div {&#10;            width: auto;&#10;            margin: 0 auto;&#10;            border-radius: 0;&#10;            padding: 1em;&#10;        }&#10;    }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;&lt;div&gt;&#10;    &lt;h1&gt;Example of Example Domain&lt;/h1&gt;&#10;    &lt;p&gt;This domain is established to be used for illustrative examples in documents. You may use this&#10;    domain in examples without prior coordination or asking for permission.&lt;/p&gt;&#10;    &lt;p&gt;&lt;a href=&quot;unavailablePage&quot;&gt;More information...&lt;/a&gt;&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&quot;&quot;&quot;,&#10;        &quot;/exampleDotCom&quot;,&#10;        setOf(localhost(PORT, &quot;/unavailablePage&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular1&quot;) to PageProperties(&#10;        &quot;circular1tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular1tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular2&quot;&gt;link1&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular1&quot;,&#10;        setOf(localhost(PORT, &quot;/circular2&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular2&quot;) to PageProperties(&#10;        &quot;circular2tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular2tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular3&quot;&gt;link1&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular2&quot;,&#10;        setOf(localhost(PORT, &quot;/circular3&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular3&quot;) to PageProperties(&#10;        &quot;circular3tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular3tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular1&quot;&gt;link&lt;/a&gt;&#10;            |&lt;a href=&quot;exampleDotCom&quot;&gt;link&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular3&quot;,&#10;        setOf(localhost(PORT, &quot;/circular1&quot;), localhost(PORT, &quot;/exampleDotCom&quot;))&#10;    )&#10;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage1Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage1Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage1Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val textArea = ComponentRequirements(&quot;TextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(textArea) +&#10;                componentsAreEnabledTests(textArea) +&#10;                stage1Tests(textAreaRequirements = textArea)&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage1Tests(textAreaRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;'${textAreaRequirements.name}' should contain text 'HTML code?'&quot;) {&#10;            val textArea = textAreaRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest (&quot;html code?&quot; in textArea.text()?.toLowerCase().orEmpty()).toCheckResult()&#10;        }&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage2Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage2Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage2Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val htmlText = ComponentRequirements(&quot;HtmlTextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(htmlText, urlText, getButton) +&#10;                componentsAreEnabledTests(htmlText, urlText, getButton) +&#10;                stage2Tests(&#10;                    htmlTextAreaRequirements = htmlText,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage2Tests(&#10;    htmlTextAreaRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;HTML code your app shows is wrong&quot;) {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val htmlTextArea = htmlTextAreaRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest pages&#10;                .asSequence()&#10;                .map { (url, pageProperties) -&gt;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    val textInTextArea = htmlTextArea.text().orEmpty()&#10;&#10;                    return@map htmlTextsAreEqual(pageProperties.content, textInTextArea)&#10;                }&#10;                .all { it }&#10;                .toCheckResult()&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage3Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage3Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JLabelFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.common.Utils.sleep&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage3Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val htmlText = ComponentRequirements(&quot;HtmlTextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(htmlText, urlText, getButton, titleLabel) +&#10;                componentsAreEnabledTests(htmlText, urlText, getButton, titleLabel) +&#10;                stage2Tests(&#10;                    htmlTextAreaRequirements = htmlText,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage3Tests(&#10;    titleLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;Title your app shows is wrong&quot;) {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val titleLabel = titleLabelRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest pages&#10;                .asSequence()&#10;                .map { (url, pageProperties) -&gt;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    sleep(100)&#10;&#10;                    val titleInLabel = titleLabel.text().orEmpty()&#10;&#10;                    return@map titleInLabel == pageProperties.title&#10;                }&#10;                .all { it }&#10;                .toCheckResult()&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage4Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage4Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JTableFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.common.Utils.sleep&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage4Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val titlesTable = ComponentRequirements(&quot;TitlesTable&quot;, isEnabled = false) { window.table(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(titlesTable, urlText, getButton, titleLabel) +&#10;                componentsAreEnabledTests(titlesTable, urlText, getButton, titleLabel) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage4Tests(&#10;                    titlesTableRequirements = titlesTable,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage4Tests(&#10;    titlesTableRequirements: ComponentRequirements&lt;JTableFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val titleTable = titlesTableRequirements.requireExistingComponent()&#10;&#10;            for (url in pages.keys) {&#10;                locationTextField.setText(url)&#10;&#10;                getTextButton.click()&#10;&#10;                sleep(100)&#10;&#10;                val contents = titleTable.contents()&#10;&#10;                if (contents.any { it.size != 2 }) {&#10;                    return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong columns number&quot;)&#10;                }&#10;&#10;                if (contents.size != url.deepUrls(depth = 1).size) {&#10;                    return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong rows number&quot; +&#10;                            &quot; have ${contents.size} should ${ url.deepUrls(depth = 1).size}&quot;)&#10;                }&#10;&#10;                for ((writtenUrl, writtenTitle) in contents) {&#10;                    if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                        return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong row&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            return@createWebCrawlerTest CheckResult(true)&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage5Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage5Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.*&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;import java.io.File&#10;&#10;abstract class WebCrawlerStage5Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val titlesTable = ComponentRequirements(&quot;TitlesTable&quot;, isEnabled = false) { window.table(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;        val saveButton = ComponentRequirements(&quot;ExportButton&quot;, isEnabled = true) { window.button(it) }&#10;        val pathToFileText = ComponentRequirements(&quot;ExportUrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +&#10;                componentsAreEnabledTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage4Tests(&#10;                    titlesTableRequirements = titlesTable,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage5Tests(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depth = 1&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage5Tests(&#10;    saveButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    savePathTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    depthTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;? = null,&#10;    depthCheckBoxRequirements: ComponentRequirements&lt;JCheckBoxFixture&gt;? = null,&#10;    parsedLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;? = null,&#10;    depth: Int&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val saveButton = saveButtonRequirements.requireExistingComponent()&#10;            val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()&#10;&#10;            val depthTextField = depthTextFieldRequirements?.requireExistingComponent()&#10;            val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()&#10;            val parsedLabel = parsedLabelRequirements?.requireExistingComponent()&#10;&#10;            for (url in pages.keys) {&#10;                depthTextField?.setText(&quot;$depth&quot;)&#10;                depthCheckBox?.enable()&#10;&#10;                locationTextField.setText(url)&#10;&#10;                getTextButton.click()&#10;&#10;                val fileName = File(&quot;&quot;).absolutePath + &quot;/temp.log&quot;&#10;&#10;                savePathTextField.setText(fileName)&#10;&#10;                saveButton.click()&#10;&#10;                val file = File(fileName)&#10;&#10;                if (!file.exists()) {&#10;                    return@createWebCrawlerTest fail(&quot;Your app doesn't create a file&quot;)&#10;                }&#10;&#10;                val contents = file.readText().lines().chunked(2).filter { it.size == 2 }&#10;                val deepUrls = url.deepUrls(depth)&#10;&#10;                if (contents.size != deepUrls.size) {&#10;                    return@createWebCrawlerTest fail(&quot;File your app saves has a wrong lines number&quot;)&#10;                }&#10;&#10;                if (contents.map { it.first() }.toSet() != deepUrls) {&#10;                    return@createWebCrawlerTest fail(&quot;File your app saves has a wrong child url&quot;)&#10;                }&#10;&#10;                for ((writtenUrl, writtenTitle) in contents) {&#10;                    if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong pair of lines&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            return@createWebCrawlerTest CheckResult(true)&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;&#10;// TODO: Code duplicate!&#10;fun stage5TestsWithJToggleButton(&#10;    saveButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JToggleButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    savePathTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    depthTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;? = null,&#10;    depthCheckBoxRequirements: ComponentRequirements&lt;JCheckBoxFixture&gt;? = null,&#10;    parsedLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;? = null,&#10;    depth: Int&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;            createWebCrawlerTest {&#10;                val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;                val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;                val saveButton = saveButtonRequirements.requireExistingComponent()&#10;                val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()&#10;&#10;                val depthTextField = depthTextFieldRequirements?.requireExistingComponent()&#10;                val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()&#10;                val parsedLabel = parsedLabelRequirements?.requireExistingComponent()&#10;&#10;                for (url in pages.keys) {&#10;                    depthTextField?.setText(&quot;$depth&quot;)&#10;                    depthCheckBox?.enable()&#10;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    val fileName = File(&quot;&quot;).absolutePath + &quot;/temp.log&quot;&#10;&#10;                    savePathTextField.setText(fileName)&#10;&#10;                    saveButton.click()&#10;&#10;                    val file = File(fileName)&#10;&#10;                    if (!file.exists()) {&#10;                        return@createWebCrawlerTest fail(&quot;Your app doesn't create a file&quot;)&#10;                    }&#10;&#10;                    val contents = file.readText().lines().chunked(2).filter { it.size == 2 }&#10;                    val deepUrls = url.deepUrls(depth)&#10;&#10;                    if (contents.size != deepUrls.size) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong lines number&quot;)&#10;                    }&#10;&#10;                    if (contents.map { it.first() }.toSet() != deepUrls) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong child url&quot;)&#10;                    }&#10;&#10;                    val parsedCount = parsedLabel?.text()?.toIntOrNull()&#10;&#10;                    if (parsedCount != deepUrls.size) {&#10;                        return@createWebCrawlerTest fail(&quot;Parsed pages number your app shows is wrong&quot;)&#10;                    }&#10;&#10;                    for ((writtenUrl, writtenTitle) in contents) {&#10;                        if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                            return@createWebCrawlerTest fail(&quot;File your app saves has a wrong pair of lines&quot;)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                return@createWebCrawlerTest CheckResult(true)&#10;            }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage6Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage6Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage6Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.toggleButton(it) }&#10;        val saveButton = ComponentRequirements(&quot;ExportButton&quot;, isEnabled = true) { window.button(it) }&#10;        val pathToFileText = ComponentRequirements(&quot;ExportUrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;&#10;        val depthText = ComponentRequirements(&quot;DepthTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val depthCheckBox = ComponentRequirements(&quot;DepthCheckBox&quot;, isEnabled = true) { window.checkBox(it) }&#10;        val parsedLabel = ComponentRequirements(&quot;ParsedLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(urlText, getButton, saveButton, pathToFileText, depthText, depthCheckBox, parsedLabel) +&#10;                componentsAreEnabledTests(&#10;                    urlText,&#10;                    getButton,&#10;                    saveButton,&#10;                    pathToFileText,&#10;                    depthText,&#10;                    depthCheckBox,&#10;                    parsedLabel&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 1&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 2&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 100500&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerUtil.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerUtil.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.AbstractJComponentFixture&#10;import org.assertj.swing.fixture.JCheckBoxFixture&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;const val PORT = 25555  // TODO: maybe use another port?&#10;&#10;class WebCrawlerClue(val feedback: String?, val checker: () -&gt; CheckResult)&#10;&#10;fun createWebCrawlerTest(feedback: String? = null, checker: () -&gt; CheckResult): TestCase&lt;WebCrawlerClue&gt; {&#10;    return TestCase&lt;WebCrawlerClue&gt;()&#10;        .setAttach(&#10;            WebCrawlerClue(&#10;                feedback = feedback,&#10;                checker = checker&#10;            )&#10;        )&#10;}&#10;&#10;fun checkWebCrawlerTest(reply: String, clue: WebCrawlerClue): CheckResult {&#10;    return try {&#10;        val (result, feedback) = clue.checker()&#10;&#10;        CheckResult(result, clue.feedback ?: feedback)&#10;    } catch (e: AssertionError) {&#10;        CheckResult(false, clue.feedback)&#10;    }&#10;}&#10;&#10;private operator fun CheckResult.component1() = isCorrect&#10;private operator fun CheckResult.component2() = feedback&#10;&#10;fun Boolean.toCheckResult() = CheckResult(this)&#10;&#10;fun fail(message: String) = CheckResult(false, message)&#10;&#10;fun htmlTextsAreEqual(source: String, inTextField: String): Boolean {&#10;    fun String.formatted(): String {&#10;        return this.trim().replace(&quot;\r\n&quot;, &quot;\n&quot;).replace(&quot;\r&quot;, &quot;\n&quot;)&#10;    }&#10;&#10;    return source.formatted() == inTextField.formatted()&#10;}&#10;&#10;fun &lt;ComponentType : AbstractJComponentFixture&lt;*, *, *&gt;&gt; ComponentRequirements&lt;ComponentType&gt;.requireExistingComponent(): ComponentType {&#10;    return requireNotNull(this.suitableComponent) {&#10;        &quot;Must check for the '${this.name}' component existence before this test&quot;&#10;    }&#10;}&#10;&#10;fun localhost(port: Int, url: String) = &quot;http://localhost:$port$url&quot;&#10;&#10;fun String.deepUrls(depth: Int): Set&lt;String&gt; {&#10;    fun String.childrenOrEmpty(): Set&lt;String&gt; {&#10;        val pageProperties = pages[this]&#10;&#10;        if (depth &lt; 0 || pageProperties == null) {&#10;            return emptySet()&#10;        }&#10;&#10;        return pageProperties.childUrls.filter { it in pages }.toSet()&#10;    }&#10;&#10;    var remainingDepth = depth - 1&#10;    val answer = this.childrenOrEmpty().toMutableSet()&#10;    while (remainingDepth &gt; 0) {&#10;        val next = answer.flatMap { it.childrenOrEmpty() } - answer&#10;&#10;        if (next.isEmpty()) {&#10;            break&#10;        }&#10;&#10;        answer.addAll(next)&#10;&#10;        --remainingDepth&#10;    }&#10;&#10;    return answer&#10;}&#10;&#10;fun JCheckBoxFixture.enable() {&#10;    if (!this.isEnabled) {&#10;        this.click()&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/crawler/ApplicationRunner.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/crawler/ApplicationRunner.java" />
                                <option name="text" value="package crawler;&#10;&#10;&#10;public class ApplicationRunner {&#10;    public static void main(String[] args) {&#10;        new WebCrawler();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/crawler/WebCrawler.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/crawler/WebCrawler.java" />
                                <option name="text" value="package crawler;&#10;&#10;import javax.swing.*;&#10;&#10;public class WebCrawler extends JFrame {&#10;    public WebCrawler() {&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setSize(300, 300);&#10;        setVisible(true);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1559843056000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Continue developing the crawler: let's collect all the links to other web pages on the page and their titles.&lt;/p&gt;&#10;&#10;&lt;p&gt;As you may know, links in HTML are tags like &lt;code&gt;&amp;lt;a href=&quot;LINK&quot;&amp;gt;&lt;/code&gt;, where &lt;code&gt;LINK&lt;/code&gt; is obviously an URL and quotes can be single (&lt;code&gt;'&lt;/code&gt;) or double (&lt;code&gt;&quot;&lt;/code&gt;).&lt;/p&gt;&#10;&#10;&lt;p&gt;The link can be presented in many ways:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;An absolute link like &lt;code&gt;https://www.wikipedia.org/index.html&lt;/code&gt;.&lt;/li&gt;&#10;    &lt;li&gt;A relative link like &lt;code&gt;page.html&lt;/code&gt;. It doesn't contain slashes. To get an absolute link you should cut the original link to the last slash and add this relative link: &lt;code&gt;https://www.wikipedia.org/index.html&lt;/code&gt;=&amp;gt; &lt;code&gt;page.html&lt;/code&gt; = &lt;code&gt;https://www.wikipedia.org/page.html&lt;/code&gt;.&lt;/li&gt;&#10;    &lt;li&gt;A link without protocol like &lt;code&gt;//en.wikipedia.org/&lt;/code&gt; or &lt;code&gt;en.wikipedia.org/&lt;/code&gt;. Here you need just to add protocol of original page: &lt;code&gt;http&lt;/code&gt; or &lt;code&gt;https&lt;/code&gt;.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;Don't forget that there are not only links to web pages. Also, there are images, music, video, and so on. Handle these cases: update page download code. &lt;code&gt;URL&lt;/code&gt;'s &lt;code&gt;openStream()&lt;/code&gt; method is a shorthand for &lt;code&gt;openConnection().getInputStream()&lt;/code&gt;. So receive an object &lt;code&gt;URLConnection&lt;/code&gt; by &lt;code&gt;openConnection()&lt;/code&gt; and check its &lt;code&gt;getContentType()&lt;/code&gt;. It must be equal to &lt;code&gt;&quot;text/html&quot;&lt;/code&gt;. Then use &lt;code&gt;.getInputStream()&lt;/code&gt; to pass the connection to the &lt;code&gt;InputStreamReader&lt;/code&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;Then display a &lt;code&gt;JTable&lt;/code&gt; with this data: the first column is the link, the second one is its title.&lt;/p&gt;&#10;&#10;&lt;p&gt;Put the &lt;code&gt;JTable&lt;/code&gt; in a &lt;code&gt;JScrollPane&lt;/code&gt; so the &lt;code&gt;JTable&lt;/code&gt; header will be shown.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Testing requirements&lt;/h2&gt;&#10;&#10;&lt;p&gt;For the testing reasons, you need to set the name of each component using the method &lt;code&gt;component.setName(String name)&lt;/code&gt;.&lt;br&gt;&#10;    On this stage, please provide the following components:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt; &quot;UrlTextField&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JButton&lt;/code&gt; &quot;RunButton&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt; &quot;TitleLabel&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JTable&lt;/code&gt; &quot;TitlesTable&quot;.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below there is the example of how your new window might look:&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/11458043-4aa4-462f-a782-a03dfef00c39/&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/59/stages/320/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5462" />
                      <option name="index" value="4" />
                      <option name="name" value="Collect them all!" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="test/CrawlerTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/CrawlerTest.java" />
                                <option name="text" value="import common.WebCrawlerStage4Test;&#10;&#10;public class CrawlerTest extends WebCrawlerStage4Test {&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerCommonTestGenerator.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerCommonTestGenerator.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.AbstractJComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;import javax.swing.JFrame&#10;&#10;fun frameTests(frameGetter: () -&gt; JFrame): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;Window is not visible&quot;) { frameGetter().isVisible.toCheckResult() },&#10;        createWebCrawlerTest(&quot;Window title is empty&quot;) { frameGetter().title.isNotEmpty().toCheckResult() }&#10;    )&#10;}&#10;&#10;class ComponentRequirements&lt;ComponentType : AbstractJComponentFixture&lt;*, *, *&gt;&gt;(&#10;    val name: String,&#10;    val isEnabled: Boolean,&#10;    private val componentFinder: (String) -&gt; ComponentType?&#10;) {&#10;    val suitableComponent: ComponentType? by lazy { componentFinder(name) }&#10;}&#10;&#10;fun existenceTests(vararg components: ComponentRequirements&lt;*&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    fun generateExistenceTest(requirements: ComponentRequirements&lt;*&gt;): TestCase&lt;WebCrawlerClue&gt; {&#10;        return createWebCrawlerTest(&quot;No suitable component '${requirements.name}' is found&quot;) {&#10;            SwingTest.checkExistence { requirements.suitableComponent }.toCheckResult()&#10;        }&#10;    }&#10;&#10;    return components.map(::generateExistenceTest)&#10;}&#10;&#10;fun componentsAreEnabledTests(vararg components: ComponentRequirements&lt;*&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    fun generateIsEnabledTest(requirements: ComponentRequirements&lt;*&gt;): TestCase&lt;WebCrawlerClue&gt; {&#10;        return if (requirements.isEnabled) {&#10;            createWebCrawlerTest(&quot;'${requirements.name}' should be enabled&quot;) {&#10;                val component = requireNotNull(requirements.suitableComponent) {&#10;                    &quot;Should check for the component existence before&quot;&#10;                }&#10;&#10;                return@createWebCrawlerTest component.isEnabled.toCheckResult()&#10;            }&#10;        } else {&#10;            createWebCrawlerTest(&quot;'${requirements.name}' should be disabled&quot;) {&#10;                val component = requireNotNull(requirements.suitableComponent) {&#10;                    &quot;Should check for the component existence before&quot;&#10;                }&#10;&#10;                return@createWebCrawlerTest (!component.isEnabled).toCheckResult()&#10;            }&#10;        }&#10;    }&#10;&#10;    return components.map(::generateIsEnabledTest)&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerLocalhostPages.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerLocalhostPages.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v4.mocks.web.WebPage&#10;import org.hyperskill.hstest.v4.mocks.web.WebServerMock&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;fun &lt;AttachType&gt; TestCase&lt;AttachType&gt;.withLocalhostPagesOn(port: Int): TestCase&lt;AttachType&gt; {&#10;    val webServerMock = WebServerMock(port).apply {&#10;        pages.forEach { _, (_, content, relativeUrl) -&gt;&#10;            setPage(relativeUrl,&#10;                    WebPage().setContent(content).setContentType(&quot;text/html&quot;)) }&#10;    }&#10;&#10;    return this.runWith(webServerMock)&#10;}&#10;&#10;data class PageProperties(val title: String, val content: String, val relativePath: String, val childUrls: Set&lt;String&gt;)&#10;&#10;val pages = mapOf(&#10;    localhost(PORT, &quot;/exampleDotCom&quot;) to PageProperties(&#10;        &quot;Example Domain&quot;,&#10;        &quot;&quot;&quot;&lt;!doctype html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Example Domain&lt;/title&gt;&#10;&#10;    &lt;meta charset=&quot;utf-8&quot; /&gt;&#10;    &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;&#10;    &lt;style type=&quot;text/css&quot;&gt;&#10;    body {&#10;        background-color: #f0f0f2;&#10;        margin: 0;&#10;        padding: 0;&#10;        font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;&#10;&#10;    }&#10;    div {&#10;        width: 600px;&#10;        margin: 5em auto;&#10;        padding: 50px;&#10;        background-color: #fff;&#10;        border-radius: 1em;&#10;    }&#10;    a:link, a:visited {&#10;        color: #38488f;&#10;        text-decoration: none;&#10;    }&#10;    @media (max-width: 700px) {&#10;        body {&#10;            background-color: #fff;&#10;        }&#10;        div {&#10;            width: auto;&#10;            margin: 0 auto;&#10;            border-radius: 0;&#10;            padding: 1em;&#10;        }&#10;    }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;&lt;div&gt;&#10;    &lt;h1&gt;Example of Example Domain&lt;/h1&gt;&#10;    &lt;p&gt;This domain is established to be used for illustrative examples in documents. You may use this&#10;    domain in examples without prior coordination or asking for permission.&lt;/p&gt;&#10;    &lt;p&gt;&lt;a href=&quot;unavailablePage&quot;&gt;More information...&lt;/a&gt;&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&quot;&quot;&quot;,&#10;        &quot;/exampleDotCom&quot;,&#10;        setOf(localhost(PORT, &quot;/unavailablePage&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular1&quot;) to PageProperties(&#10;        &quot;circular1tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular1tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular2&quot;&gt;link1&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular1&quot;,&#10;        setOf(localhost(PORT, &quot;/circular2&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular2&quot;) to PageProperties(&#10;        &quot;circular2tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular2tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular3&quot;&gt;link1&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular2&quot;,&#10;        setOf(localhost(PORT, &quot;/circular3&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular3&quot;) to PageProperties(&#10;        &quot;circular3tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular3tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular1&quot;&gt;link&lt;/a&gt;&#10;            |&lt;a href=&quot;exampleDotCom&quot;&gt;link&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular3&quot;,&#10;        setOf(localhost(PORT, &quot;/circular1&quot;), localhost(PORT, &quot;/exampleDotCom&quot;))&#10;    )&#10;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage1Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage1Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage1Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val textArea = ComponentRequirements(&quot;TextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(textArea) +&#10;                componentsAreEnabledTests(textArea) +&#10;                stage1Tests(textAreaRequirements = textArea)&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage1Tests(textAreaRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;'${textAreaRequirements.name}' should contain text 'HTML code?'&quot;) {&#10;            val textArea = textAreaRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest (&quot;html code?&quot; in textArea.text()?.toLowerCase().orEmpty()).toCheckResult()&#10;        }&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage2Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage2Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage2Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val htmlText = ComponentRequirements(&quot;HtmlTextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(htmlText, urlText, getButton) +&#10;                componentsAreEnabledTests(htmlText, urlText, getButton) +&#10;                stage2Tests(&#10;                    htmlTextAreaRequirements = htmlText,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage2Tests(&#10;    htmlTextAreaRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;HTML code your app shows is wrong&quot;) {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val htmlTextArea = htmlTextAreaRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest pages&#10;                .asSequence()&#10;                .map { (url, pageProperties) -&gt;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    val textInTextArea = htmlTextArea.text().orEmpty()&#10;&#10;                    return@map htmlTextsAreEqual(pageProperties.content, textInTextArea)&#10;                }&#10;                .all { it }&#10;                .toCheckResult()&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage3Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage3Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JLabelFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.common.Utils.sleep&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage3Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val htmlText = ComponentRequirements(&quot;HtmlTextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(htmlText, urlText, getButton, titleLabel) +&#10;                componentsAreEnabledTests(htmlText, urlText, getButton, titleLabel) +&#10;                stage2Tests(&#10;                    htmlTextAreaRequirements = htmlText,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage3Tests(&#10;    titleLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;Title your app shows is wrong&quot;) {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val titleLabel = titleLabelRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest pages&#10;                .asSequence()&#10;                .map { (url, pageProperties) -&gt;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    sleep(100)&#10;&#10;                    val titleInLabel = titleLabel.text().orEmpty()&#10;&#10;                    return@map titleInLabel == pageProperties.title&#10;                }&#10;                .all { it }&#10;                .toCheckResult()&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage4Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage4Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JTableFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.common.Utils.sleep&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage4Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val titlesTable = ComponentRequirements(&quot;TitlesTable&quot;, isEnabled = false) { window.table(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(titlesTable, urlText, getButton, titleLabel) +&#10;                componentsAreEnabledTests(titlesTable, urlText, getButton, titleLabel) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage4Tests(&#10;                    titlesTableRequirements = titlesTable,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage4Tests(&#10;    titlesTableRequirements: ComponentRequirements&lt;JTableFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val titleTable = titlesTableRequirements.requireExistingComponent()&#10;&#10;            for (url in pages.keys) {&#10;                locationTextField.setText(url)&#10;&#10;                getTextButton.click()&#10;&#10;                sleep(100)&#10;&#10;                val contents = titleTable.contents()&#10;&#10;                if (contents.any { it.size != 2 }) {&#10;                    return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong columns number&quot;)&#10;                }&#10;&#10;                if (contents.size != url.deepUrls(depth = 1).size) {&#10;                    return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong rows number&quot; +&#10;                            &quot; have ${contents.size} should ${ url.deepUrls(depth = 1).size}&quot;)&#10;                }&#10;&#10;                for ((writtenUrl, writtenTitle) in contents) {&#10;                    if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                        return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong row&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            return@createWebCrawlerTest CheckResult(true)&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage5Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage5Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.*&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;import java.io.File&#10;&#10;abstract class WebCrawlerStage5Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val titlesTable = ComponentRequirements(&quot;TitlesTable&quot;, isEnabled = false) { window.table(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;        val saveButton = ComponentRequirements(&quot;ExportButton&quot;, isEnabled = true) { window.button(it) }&#10;        val pathToFileText = ComponentRequirements(&quot;ExportUrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +&#10;                componentsAreEnabledTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage4Tests(&#10;                    titlesTableRequirements = titlesTable,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage5Tests(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depth = 1&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage5Tests(&#10;    saveButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    savePathTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    depthTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;? = null,&#10;    depthCheckBoxRequirements: ComponentRequirements&lt;JCheckBoxFixture&gt;? = null,&#10;    parsedLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;? = null,&#10;    depth: Int&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val saveButton = saveButtonRequirements.requireExistingComponent()&#10;            val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()&#10;&#10;            val depthTextField = depthTextFieldRequirements?.requireExistingComponent()&#10;            val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()&#10;            val parsedLabel = parsedLabelRequirements?.requireExistingComponent()&#10;&#10;            for (url in pages.keys) {&#10;                depthTextField?.setText(&quot;$depth&quot;)&#10;                depthCheckBox?.enable()&#10;&#10;                locationTextField.setText(url)&#10;&#10;                getTextButton.click()&#10;&#10;                val fileName = File(&quot;&quot;).absolutePath + &quot;/temp.log&quot;&#10;&#10;                savePathTextField.setText(fileName)&#10;&#10;                saveButton.click()&#10;&#10;                val file = File(fileName)&#10;&#10;                if (!file.exists()) {&#10;                    return@createWebCrawlerTest fail(&quot;Your app doesn't create a file&quot;)&#10;                }&#10;&#10;                val contents = file.readText().lines().chunked(2).filter { it.size == 2 }&#10;                val deepUrls = url.deepUrls(depth)&#10;&#10;                if (contents.size != deepUrls.size) {&#10;                    return@createWebCrawlerTest fail(&quot;File your app saves has a wrong lines number&quot;)&#10;                }&#10;&#10;                if (contents.map { it.first() }.toSet() != deepUrls) {&#10;                    return@createWebCrawlerTest fail(&quot;File your app saves has a wrong child url&quot;)&#10;                }&#10;&#10;                for ((writtenUrl, writtenTitle) in contents) {&#10;                    if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong pair of lines&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            return@createWebCrawlerTest CheckResult(true)&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;&#10;// TODO: Code duplicate!&#10;fun stage5TestsWithJToggleButton(&#10;    saveButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JToggleButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    savePathTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    depthTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;? = null,&#10;    depthCheckBoxRequirements: ComponentRequirements&lt;JCheckBoxFixture&gt;? = null,&#10;    parsedLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;? = null,&#10;    depth: Int&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;            createWebCrawlerTest {&#10;                val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;                val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;                val saveButton = saveButtonRequirements.requireExistingComponent()&#10;                val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()&#10;&#10;                val depthTextField = depthTextFieldRequirements?.requireExistingComponent()&#10;                val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()&#10;                val parsedLabel = parsedLabelRequirements?.requireExistingComponent()&#10;&#10;                for (url in pages.keys) {&#10;                    depthTextField?.setText(&quot;$depth&quot;)&#10;                    depthCheckBox?.enable()&#10;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    val fileName = File(&quot;&quot;).absolutePath + &quot;/temp.log&quot;&#10;&#10;                    savePathTextField.setText(fileName)&#10;&#10;                    saveButton.click()&#10;&#10;                    val file = File(fileName)&#10;&#10;                    if (!file.exists()) {&#10;                        return@createWebCrawlerTest fail(&quot;Your app doesn't create a file&quot;)&#10;                    }&#10;&#10;                    val contents = file.readText().lines().chunked(2).filter { it.size == 2 }&#10;                    val deepUrls = url.deepUrls(depth)&#10;&#10;                    if (contents.size != deepUrls.size) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong lines number&quot;)&#10;                    }&#10;&#10;                    if (contents.map { it.first() }.toSet() != deepUrls) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong child url&quot;)&#10;                    }&#10;&#10;                    val parsedCount = parsedLabel?.text()?.toIntOrNull()&#10;&#10;                    if (parsedCount != deepUrls.size) {&#10;                        return@createWebCrawlerTest fail(&quot;Parsed pages number your app shows is wrong&quot;)&#10;                    }&#10;&#10;                    for ((writtenUrl, writtenTitle) in contents) {&#10;                        if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                            return@createWebCrawlerTest fail(&quot;File your app saves has a wrong pair of lines&quot;)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                return@createWebCrawlerTest CheckResult(true)&#10;            }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage6Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage6Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage6Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.toggleButton(it) }&#10;        val saveButton = ComponentRequirements(&quot;ExportButton&quot;, isEnabled = true) { window.button(it) }&#10;        val pathToFileText = ComponentRequirements(&quot;ExportUrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;&#10;        val depthText = ComponentRequirements(&quot;DepthTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val depthCheckBox = ComponentRequirements(&quot;DepthCheckBox&quot;, isEnabled = true) { window.checkBox(it) }&#10;        val parsedLabel = ComponentRequirements(&quot;ParsedLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(urlText, getButton, saveButton, pathToFileText, depthText, depthCheckBox, parsedLabel) +&#10;                componentsAreEnabledTests(&#10;                    urlText,&#10;                    getButton,&#10;                    saveButton,&#10;                    pathToFileText,&#10;                    depthText,&#10;                    depthCheckBox,&#10;                    parsedLabel&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 1&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 2&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 100500&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerUtil.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerUtil.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.AbstractJComponentFixture&#10;import org.assertj.swing.fixture.JCheckBoxFixture&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;const val PORT = 25555  // TODO: maybe use another port?&#10;&#10;class WebCrawlerClue(val feedback: String?, val checker: () -&gt; CheckResult)&#10;&#10;fun createWebCrawlerTest(feedback: String? = null, checker: () -&gt; CheckResult): TestCase&lt;WebCrawlerClue&gt; {&#10;    return TestCase&lt;WebCrawlerClue&gt;()&#10;        .setAttach(&#10;            WebCrawlerClue(&#10;                feedback = feedback,&#10;                checker = checker&#10;            )&#10;        )&#10;}&#10;&#10;fun checkWebCrawlerTest(reply: String, clue: WebCrawlerClue): CheckResult {&#10;    return try {&#10;        val (result, feedback) = clue.checker()&#10;&#10;        CheckResult(result, clue.feedback ?: feedback)&#10;    } catch (e: AssertionError) {&#10;        CheckResult(false, clue.feedback)&#10;    }&#10;}&#10;&#10;private operator fun CheckResult.component1() = isCorrect&#10;private operator fun CheckResult.component2() = feedback&#10;&#10;fun Boolean.toCheckResult() = CheckResult(this)&#10;&#10;fun fail(message: String) = CheckResult(false, message)&#10;&#10;fun htmlTextsAreEqual(source: String, inTextField: String): Boolean {&#10;    fun String.formatted(): String {&#10;        return this.trim().replace(&quot;\r\n&quot;, &quot;\n&quot;).replace(&quot;\r&quot;, &quot;\n&quot;)&#10;    }&#10;&#10;    return source.formatted() == inTextField.formatted()&#10;}&#10;&#10;fun &lt;ComponentType : AbstractJComponentFixture&lt;*, *, *&gt;&gt; ComponentRequirements&lt;ComponentType&gt;.requireExistingComponent(): ComponentType {&#10;    return requireNotNull(this.suitableComponent) {&#10;        &quot;Must check for the '${this.name}' component existence before this test&quot;&#10;    }&#10;}&#10;&#10;fun localhost(port: Int, url: String) = &quot;http://localhost:$port$url&quot;&#10;&#10;fun String.deepUrls(depth: Int): Set&lt;String&gt; {&#10;    fun String.childrenOrEmpty(): Set&lt;String&gt; {&#10;        val pageProperties = pages[this]&#10;&#10;        if (depth &lt; 0 || pageProperties == null) {&#10;            return emptySet()&#10;        }&#10;&#10;        return pageProperties.childUrls.filter { it in pages }.toSet()&#10;    }&#10;&#10;    var remainingDepth = depth - 1&#10;    val answer = this.childrenOrEmpty().toMutableSet()&#10;    while (remainingDepth &gt; 0) {&#10;        val next = answer.flatMap { it.childrenOrEmpty() } - answer&#10;&#10;        if (next.isEmpty()) {&#10;            break&#10;        }&#10;&#10;        answer.addAll(next)&#10;&#10;        --remainingDepth&#10;    }&#10;&#10;    return answer&#10;}&#10;&#10;fun JCheckBoxFixture.enable() {&#10;    if (!this.isEnabled) {&#10;        this.click()&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/crawler/ApplicationRunner.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/crawler/ApplicationRunner.java" />
                                <option name="text" value="package crawler;&#10;&#10;&#10;public class ApplicationRunner {&#10;    public static void main(String[] args) {&#10;        new WebCrawler();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/crawler/WebCrawler.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/crawler/WebCrawler.java" />
                                <option name="text" value="package crawler;&#10;&#10;import javax.swing.*;&#10;&#10;public class WebCrawler extends JFrame {&#10;    public WebCrawler() {&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setSize(300, 300);&#10;        setVisible(true);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1559843057000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Implement the table export: this is useful for sending results to another computer or for processing results in another program. Add a button to save file on disk. Also, add a text field where the file path will be written.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can write a file like a set of pairs of lines: every odd line contains a link and the following (even) line contains the title of the web page by the link.&lt;/p&gt;&#10;&#10;&lt;p&gt;Also, you can update the way you've been creating the &lt;code&gt;URLConnection&lt;/code&gt; to disguise as a human because many sites can send a wrong HTML code if they understand that the query is sent by a bot. The aim is to specify &lt;code&gt;user-agent&lt;/code&gt; property as the property in common browser.&lt;/p&gt;&#10;&#10;&lt;p&gt;Do &lt;code&gt;.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0&quot;)&lt;/code&gt; for an &lt;code&gt;URLConnection&lt;/code&gt; object. It's like Firefox running on Windows 10. So most sites will treat the bot as a human.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Testing requirements&lt;/h2&gt;&#10;&#10;&lt;p&gt;For the testing reasons, you need to set the name of each component using the method &lt;code&gt;component.setName(String name)&lt;/code&gt;.&lt;br&gt;&#10;    On this stage, please provide the following components:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt; &quot;UrlTextField&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JButton&lt;/code&gt; &quot;RunButton&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt; &quot;TitleLabel&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JTable&lt;/code&gt; &quot;TitlesTable&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt; &quot;ExportUrlTextField&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JButton&lt;/code&gt; &quot;ExportButton&quot;.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below there is the example of how your new window might look:&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/520dcbed-0332-4d13-b70a-efcec0aa558c/&quot;&gt;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/59/stages/321/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5463" />
                      <option name="index" value="5" />
                      <option name="name" value="Save the results" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="test/CrawlerTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/CrawlerTest.java" />
                                <option name="text" value="import common.WebCrawlerStage5Test;&#10;&#10;public class CrawlerTest extends WebCrawlerStage5Test {&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerCommonTestGenerator.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerCommonTestGenerator.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.AbstractJComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;import javax.swing.JFrame&#10;&#10;fun frameTests(frameGetter: () -&gt; JFrame): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;Window is not visible&quot;) { frameGetter().isVisible.toCheckResult() },&#10;        createWebCrawlerTest(&quot;Window title is empty&quot;) { frameGetter().title.isNotEmpty().toCheckResult() }&#10;    )&#10;}&#10;&#10;class ComponentRequirements&lt;ComponentType : AbstractJComponentFixture&lt;*, *, *&gt;&gt;(&#10;    val name: String,&#10;    val isEnabled: Boolean,&#10;    private val componentFinder: (String) -&gt; ComponentType?&#10;) {&#10;    val suitableComponent: ComponentType? by lazy { componentFinder(name) }&#10;}&#10;&#10;fun existenceTests(vararg components: ComponentRequirements&lt;*&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    fun generateExistenceTest(requirements: ComponentRequirements&lt;*&gt;): TestCase&lt;WebCrawlerClue&gt; {&#10;        return createWebCrawlerTest(&quot;No suitable component '${requirements.name}' is found&quot;) {&#10;            SwingTest.checkExistence { requirements.suitableComponent }.toCheckResult()&#10;        }&#10;    }&#10;&#10;    return components.map(::generateExistenceTest)&#10;}&#10;&#10;fun componentsAreEnabledTests(vararg components: ComponentRequirements&lt;*&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    fun generateIsEnabledTest(requirements: ComponentRequirements&lt;*&gt;): TestCase&lt;WebCrawlerClue&gt; {&#10;        return if (requirements.isEnabled) {&#10;            createWebCrawlerTest(&quot;'${requirements.name}' should be enabled&quot;) {&#10;                val component = requireNotNull(requirements.suitableComponent) {&#10;                    &quot;Should check for the component existence before&quot;&#10;                }&#10;&#10;                return@createWebCrawlerTest component.isEnabled.toCheckResult()&#10;            }&#10;        } else {&#10;            createWebCrawlerTest(&quot;'${requirements.name}' should be disabled&quot;) {&#10;                val component = requireNotNull(requirements.suitableComponent) {&#10;                    &quot;Should check for the component existence before&quot;&#10;                }&#10;&#10;                return@createWebCrawlerTest (!component.isEnabled).toCheckResult()&#10;            }&#10;        }&#10;    }&#10;&#10;    return components.map(::generateIsEnabledTest)&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerLocalhostPages.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerLocalhostPages.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v4.mocks.web.WebPage&#10;import org.hyperskill.hstest.v4.mocks.web.WebServerMock&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;fun &lt;AttachType&gt; TestCase&lt;AttachType&gt;.withLocalhostPagesOn(port: Int): TestCase&lt;AttachType&gt; {&#10;    val webServerMock = WebServerMock(port).apply {&#10;        pages.forEach { _, (_, content, relativeUrl) -&gt;&#10;            setPage(relativeUrl,&#10;                    WebPage().setContent(content).setContentType(&quot;text/html&quot;)) }&#10;    }&#10;&#10;    return this.runWith(webServerMock)&#10;}&#10;&#10;data class PageProperties(val title: String, val content: String, val relativePath: String, val childUrls: Set&lt;String&gt;)&#10;&#10;val pages = mapOf(&#10;    localhost(PORT, &quot;/exampleDotCom&quot;) to PageProperties(&#10;        &quot;Example Domain&quot;,&#10;        &quot;&quot;&quot;&lt;!doctype html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Example Domain&lt;/title&gt;&#10;&#10;    &lt;meta charset=&quot;utf-8&quot; /&gt;&#10;    &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;&#10;    &lt;style type=&quot;text/css&quot;&gt;&#10;    body {&#10;        background-color: #f0f0f2;&#10;        margin: 0;&#10;        padding: 0;&#10;        font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;&#10;&#10;    }&#10;    div {&#10;        width: 600px;&#10;        margin: 5em auto;&#10;        padding: 50px;&#10;        background-color: #fff;&#10;        border-radius: 1em;&#10;    }&#10;    a:link, a:visited {&#10;        color: #38488f;&#10;        text-decoration: none;&#10;    }&#10;    @media (max-width: 700px) {&#10;        body {&#10;            background-color: #fff;&#10;        }&#10;        div {&#10;            width: auto;&#10;            margin: 0 auto;&#10;            border-radius: 0;&#10;            padding: 1em;&#10;        }&#10;    }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;&lt;div&gt;&#10;    &lt;h1&gt;Example of Example Domain&lt;/h1&gt;&#10;    &lt;p&gt;This domain is established to be used for illustrative examples in documents. You may use this&#10;    domain in examples without prior coordination or asking for permission.&lt;/p&gt;&#10;    &lt;p&gt;&lt;a href=&quot;unavailablePage&quot;&gt;More information...&lt;/a&gt;&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&quot;&quot;&quot;,&#10;        &quot;/exampleDotCom&quot;,&#10;        setOf(localhost(PORT, &quot;/unavailablePage&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular1&quot;) to PageProperties(&#10;        &quot;circular1tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular1tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular2&quot;&gt;link1&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular1&quot;,&#10;        setOf(localhost(PORT, &quot;/circular2&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular2&quot;) to PageProperties(&#10;        &quot;circular2tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular2tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular3&quot;&gt;link1&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular2&quot;,&#10;        setOf(localhost(PORT, &quot;/circular3&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular3&quot;) to PageProperties(&#10;        &quot;circular3tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular3tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular1&quot;&gt;link&lt;/a&gt;&#10;            |&lt;a href=&quot;exampleDotCom&quot;&gt;link&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular3&quot;,&#10;        setOf(localhost(PORT, &quot;/circular1&quot;), localhost(PORT, &quot;/exampleDotCom&quot;))&#10;    )&#10;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage1Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage1Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage1Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val textArea = ComponentRequirements(&quot;TextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(textArea) +&#10;                componentsAreEnabledTests(textArea) +&#10;                stage1Tests(textAreaRequirements = textArea)&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage1Tests(textAreaRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;'${textAreaRequirements.name}' should contain text 'HTML code?'&quot;) {&#10;            val textArea = textAreaRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest (&quot;html code?&quot; in textArea.text()?.toLowerCase().orEmpty()).toCheckResult()&#10;        }&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage2Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage2Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage2Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val htmlText = ComponentRequirements(&quot;HtmlTextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(htmlText, urlText, getButton) +&#10;                componentsAreEnabledTests(htmlText, urlText, getButton) +&#10;                stage2Tests(&#10;                    htmlTextAreaRequirements = htmlText,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage2Tests(&#10;    htmlTextAreaRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;HTML code your app shows is wrong&quot;) {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val htmlTextArea = htmlTextAreaRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest pages&#10;                .asSequence()&#10;                .map { (url, pageProperties) -&gt;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    val textInTextArea = htmlTextArea.text().orEmpty()&#10;&#10;                    return@map htmlTextsAreEqual(pageProperties.content, textInTextArea)&#10;                }&#10;                .all { it }&#10;                .toCheckResult()&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage3Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage3Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JLabelFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.common.Utils.sleep&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage3Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val htmlText = ComponentRequirements(&quot;HtmlTextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(htmlText, urlText, getButton, titleLabel) +&#10;                componentsAreEnabledTests(htmlText, urlText, getButton, titleLabel) +&#10;                stage2Tests(&#10;                    htmlTextAreaRequirements = htmlText,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage3Tests(&#10;    titleLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;Title your app shows is wrong&quot;) {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val titleLabel = titleLabelRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest pages&#10;                .asSequence()&#10;                .map { (url, pageProperties) -&gt;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    sleep(100)&#10;&#10;                    val titleInLabel = titleLabel.text().orEmpty()&#10;&#10;                    return@map titleInLabel == pageProperties.title&#10;                }&#10;                .all { it }&#10;                .toCheckResult()&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage4Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage4Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JTableFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.common.Utils.sleep&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage4Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val titlesTable = ComponentRequirements(&quot;TitlesTable&quot;, isEnabled = false) { window.table(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(titlesTable, urlText, getButton, titleLabel) +&#10;                componentsAreEnabledTests(titlesTable, urlText, getButton, titleLabel) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage4Tests(&#10;                    titlesTableRequirements = titlesTable,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage4Tests(&#10;    titlesTableRequirements: ComponentRequirements&lt;JTableFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val titleTable = titlesTableRequirements.requireExistingComponent()&#10;&#10;            for (url in pages.keys) {&#10;                locationTextField.setText(url)&#10;&#10;                getTextButton.click()&#10;&#10;                sleep(100)&#10;&#10;                val contents = titleTable.contents()&#10;&#10;                if (contents.any { it.size != 2 }) {&#10;                    return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong columns number&quot;)&#10;                }&#10;&#10;                if (contents.size != url.deepUrls(depth = 1).size) {&#10;                    return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong rows number&quot; +&#10;                            &quot; have ${contents.size} should ${ url.deepUrls(depth = 1).size}&quot;)&#10;                }&#10;&#10;                for ((writtenUrl, writtenTitle) in contents) {&#10;                    if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                        return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong row&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            return@createWebCrawlerTest CheckResult(true)&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage5Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage5Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.*&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;import java.io.File&#10;&#10;abstract class WebCrawlerStage5Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val titlesTable = ComponentRequirements(&quot;TitlesTable&quot;, isEnabled = false) { window.table(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;        val saveButton = ComponentRequirements(&quot;ExportButton&quot;, isEnabled = true) { window.button(it) }&#10;        val pathToFileText = ComponentRequirements(&quot;ExportUrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +&#10;                componentsAreEnabledTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage4Tests(&#10;                    titlesTableRequirements = titlesTable,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage5Tests(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depth = 1&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage5Tests(&#10;    saveButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    savePathTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    depthTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;? = null,&#10;    depthCheckBoxRequirements: ComponentRequirements&lt;JCheckBoxFixture&gt;? = null,&#10;    parsedLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;? = null,&#10;    depth: Int&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val saveButton = saveButtonRequirements.requireExistingComponent()&#10;            val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()&#10;&#10;            val depthTextField = depthTextFieldRequirements?.requireExistingComponent()&#10;            val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()&#10;            val parsedLabel = parsedLabelRequirements?.requireExistingComponent()&#10;&#10;            for (url in pages.keys) {&#10;                depthTextField?.setText(&quot;$depth&quot;)&#10;                depthCheckBox?.enable()&#10;&#10;                locationTextField.setText(url)&#10;&#10;                getTextButton.click()&#10;&#10;                val fileName = File(&quot;&quot;).absolutePath + &quot;/temp.log&quot;&#10;&#10;                savePathTextField.setText(fileName)&#10;&#10;                saveButton.click()&#10;&#10;                val file = File(fileName)&#10;&#10;                if (!file.exists()) {&#10;                    return@createWebCrawlerTest fail(&quot;Your app doesn't create a file&quot;)&#10;                }&#10;&#10;                val contents = file.readText().lines().chunked(2).filter { it.size == 2 }&#10;                val deepUrls = url.deepUrls(depth)&#10;&#10;                if (contents.size != deepUrls.size) {&#10;                    return@createWebCrawlerTest fail(&quot;File your app saves has a wrong lines number&quot;)&#10;                }&#10;&#10;                if (contents.map { it.first() }.toSet() != deepUrls) {&#10;                    return@createWebCrawlerTest fail(&quot;File your app saves has a wrong child url&quot;)&#10;                }&#10;&#10;                for ((writtenUrl, writtenTitle) in contents) {&#10;                    if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong pair of lines&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            return@createWebCrawlerTest CheckResult(true)&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;&#10;// TODO: Code duplicate!&#10;fun stage5TestsWithJToggleButton(&#10;    saveButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JToggleButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    savePathTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    depthTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;? = null,&#10;    depthCheckBoxRequirements: ComponentRequirements&lt;JCheckBoxFixture&gt;? = null,&#10;    parsedLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;? = null,&#10;    depth: Int&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;            createWebCrawlerTest {&#10;                val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;                val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;                val saveButton = saveButtonRequirements.requireExistingComponent()&#10;                val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()&#10;&#10;                val depthTextField = depthTextFieldRequirements?.requireExistingComponent()&#10;                val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()&#10;                val parsedLabel = parsedLabelRequirements?.requireExistingComponent()&#10;&#10;                for (url in pages.keys) {&#10;                    depthTextField?.setText(&quot;$depth&quot;)&#10;                    depthCheckBox?.enable()&#10;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    val fileName = File(&quot;&quot;).absolutePath + &quot;/temp.log&quot;&#10;&#10;                    savePathTextField.setText(fileName)&#10;&#10;                    saveButton.click()&#10;&#10;                    val file = File(fileName)&#10;&#10;                    if (!file.exists()) {&#10;                        return@createWebCrawlerTest fail(&quot;Your app doesn't create a file&quot;)&#10;                    }&#10;&#10;                    val contents = file.readText().lines().chunked(2).filter { it.size == 2 }&#10;                    val deepUrls = url.deepUrls(depth)&#10;&#10;                    if (contents.size != deepUrls.size) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong lines number&quot;)&#10;                    }&#10;&#10;                    if (contents.map { it.first() }.toSet() != deepUrls) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong child url&quot;)&#10;                    }&#10;&#10;                    val parsedCount = parsedLabel?.text()?.toIntOrNull()&#10;&#10;                    if (parsedCount != deepUrls.size) {&#10;                        return@createWebCrawlerTest fail(&quot;Parsed pages number your app shows is wrong&quot;)&#10;                    }&#10;&#10;                    for ((writtenUrl, writtenTitle) in contents) {&#10;                        if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                            return@createWebCrawlerTest fail(&quot;File your app saves has a wrong pair of lines&quot;)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                return@createWebCrawlerTest CheckResult(true)&#10;            }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage6Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage6Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage6Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.toggleButton(it) }&#10;        val saveButton = ComponentRequirements(&quot;ExportButton&quot;, isEnabled = true) { window.button(it) }&#10;        val pathToFileText = ComponentRequirements(&quot;ExportUrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;&#10;        val depthText = ComponentRequirements(&quot;DepthTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val depthCheckBox = ComponentRequirements(&quot;DepthCheckBox&quot;, isEnabled = true) { window.checkBox(it) }&#10;        val parsedLabel = ComponentRequirements(&quot;ParsedLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(urlText, getButton, saveButton, pathToFileText, depthText, depthCheckBox, parsedLabel) +&#10;                componentsAreEnabledTests(&#10;                    urlText,&#10;                    getButton,&#10;                    saveButton,&#10;                    pathToFileText,&#10;                    depthText,&#10;                    depthCheckBox,&#10;                    parsedLabel&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 1&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 2&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 100500&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerUtil.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerUtil.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.AbstractJComponentFixture&#10;import org.assertj.swing.fixture.JCheckBoxFixture&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;const val PORT = 25555  // TODO: maybe use another port?&#10;&#10;class WebCrawlerClue(val feedback: String?, val checker: () -&gt; CheckResult)&#10;&#10;fun createWebCrawlerTest(feedback: String? = null, checker: () -&gt; CheckResult): TestCase&lt;WebCrawlerClue&gt; {&#10;    return TestCase&lt;WebCrawlerClue&gt;()&#10;        .setAttach(&#10;            WebCrawlerClue(&#10;                feedback = feedback,&#10;                checker = checker&#10;            )&#10;        )&#10;}&#10;&#10;fun checkWebCrawlerTest(reply: String, clue: WebCrawlerClue): CheckResult {&#10;    return try {&#10;        val (result, feedback) = clue.checker()&#10;&#10;        CheckResult(result, clue.feedback ?: feedback)&#10;    } catch (e: AssertionError) {&#10;        CheckResult(false, clue.feedback)&#10;    }&#10;}&#10;&#10;private operator fun CheckResult.component1() = isCorrect&#10;private operator fun CheckResult.component2() = feedback&#10;&#10;fun Boolean.toCheckResult() = CheckResult(this)&#10;&#10;fun fail(message: String) = CheckResult(false, message)&#10;&#10;fun htmlTextsAreEqual(source: String, inTextField: String): Boolean {&#10;    fun String.formatted(): String {&#10;        return this.trim().replace(&quot;\r\n&quot;, &quot;\n&quot;).replace(&quot;\r&quot;, &quot;\n&quot;)&#10;    }&#10;&#10;    return source.formatted() == inTextField.formatted()&#10;}&#10;&#10;fun &lt;ComponentType : AbstractJComponentFixture&lt;*, *, *&gt;&gt; ComponentRequirements&lt;ComponentType&gt;.requireExistingComponent(): ComponentType {&#10;    return requireNotNull(this.suitableComponent) {&#10;        &quot;Must check for the '${this.name}' component existence before this test&quot;&#10;    }&#10;}&#10;&#10;fun localhost(port: Int, url: String) = &quot;http://localhost:$port$url&quot;&#10;&#10;fun String.deepUrls(depth: Int): Set&lt;String&gt; {&#10;    fun String.childrenOrEmpty(): Set&lt;String&gt; {&#10;        val pageProperties = pages[this]&#10;&#10;        if (depth &lt; 0 || pageProperties == null) {&#10;            return emptySet()&#10;        }&#10;&#10;        return pageProperties.childUrls.filter { it in pages }.toSet()&#10;    }&#10;&#10;    var remainingDepth = depth - 1&#10;    val answer = this.childrenOrEmpty().toMutableSet()&#10;    while (remainingDepth &gt; 0) {&#10;        val next = answer.flatMap { it.childrenOrEmpty() } - answer&#10;&#10;        if (next.isEmpty()) {&#10;            break&#10;        }&#10;&#10;        answer.addAll(next)&#10;&#10;        --remainingDepth&#10;    }&#10;&#10;    return answer&#10;}&#10;&#10;fun JCheckBoxFixture.enable() {&#10;    if (!this.isEnabled) {&#10;        this.click()&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/crawler/ApplicationRunner.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/crawler/ApplicationRunner.java" />
                                <option name="text" value="package crawler;&#10;&#10;&#10;public class ApplicationRunner {&#10;    public static void main(String[] args) {&#10;        new WebCrawler();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/crawler/WebCrawler.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/crawler/WebCrawler.java" />
                                <option name="text" value="package crawler;&#10;&#10;import javax.swing.*;&#10;&#10;public class WebCrawler extends JFrame {&#10;    public WebCrawler() {&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setSize(300, 300);&#10;        setVisible(true);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1559843058000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;At the final stage, implement a real web crawler!&lt;/p&gt;&#10;&#10;&lt;p&gt;We suggest you use the following algorithm.&lt;/p&gt;&#10;&#10;&lt;p&gt;Create some threads-workers which wait for new tasks in the task queue. A task is an URL. If a thread-worker gets a task, it goes to the page, saves its title, collects all links on the page, and adds this links as new tasks to the task queue.&lt;/p&gt;&#10;&#10;&lt;p&gt;So links and titles will be &lt;a href=&quot;https://en.wikipedia.org/wiki/Breadth-first_search&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;breadth-first searched&lt;/a&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;Don't forget to exclude already visited pages from new tasks as they add redundant work.&lt;/p&gt;&#10;&#10;&lt;p&gt;To sum up, add the following components to your window:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;The number of threads-workers.&lt;/li&gt;&#10;    &lt;li&gt;Two checkable restrictions:&#10;        &lt;ul&gt;&#10;            &lt;li&gt;Maximum crawling depth: if enabled, workers won't go too deep in the Internet.&lt;/li&gt;&#10;            &lt;li&gt;Time limit: if enabled, workers won't add tasks after the given time.&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;A &lt;code&gt;JToggleButton&lt;/code&gt; Run/Stop to toggle crawling process (the button should deactivate automatically if a restriction becomes valid or there is no task in the task queue).&lt;/li&gt;&#10;    &lt;li&gt;Metrics like elapsed time and parsed page count.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Testing requirements&lt;/h2&gt;&#10;&#10;&lt;p&gt;For the testing reasons, you need to set the name of each component using the method &lt;code&gt;component.setName(String name)&lt;/code&gt;.&lt;br&gt;&#10;    On this stage, please provide the following components:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt; &quot;UrlTextField&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JToggleButton&lt;/code&gt; &quot;RunButton&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt; &quot;DepthTextField&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JCheckBox&lt;/code&gt; &quot;DepthCheckBox&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt; &quot;ParsedLabel&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt; &quot;ExportUrlTextField&quot;.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;JButton&lt;/code&gt; &quot;ExportButton&quot;.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below there is the example of how your new window might look:&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/d7c94d48-02da-4484-9085-9517d629f65b/&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/59/stages/322/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5464" />
                      <option name="index" value="6" />
                      <option name="name" value="Complicated matters" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="test/CrawlerTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/CrawlerTest.java" />
                                <option name="text" value="import common.WebCrawlerStage6Test;&#10;&#10;public class CrawlerTest extends WebCrawlerStage6Test {&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerCommonTestGenerator.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerCommonTestGenerator.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.AbstractJComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;import javax.swing.JFrame&#10;&#10;fun frameTests(frameGetter: () -&gt; JFrame): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;Window is not visible&quot;) { frameGetter().isVisible.toCheckResult() },&#10;        createWebCrawlerTest(&quot;Window title is empty&quot;) { frameGetter().title.isNotEmpty().toCheckResult() }&#10;    )&#10;}&#10;&#10;class ComponentRequirements&lt;ComponentType : AbstractJComponentFixture&lt;*, *, *&gt;&gt;(&#10;    val name: String,&#10;    val isEnabled: Boolean,&#10;    private val componentFinder: (String) -&gt; ComponentType?&#10;) {&#10;    val suitableComponent: ComponentType? by lazy { componentFinder(name) }&#10;}&#10;&#10;fun existenceTests(vararg components: ComponentRequirements&lt;*&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    fun generateExistenceTest(requirements: ComponentRequirements&lt;*&gt;): TestCase&lt;WebCrawlerClue&gt; {&#10;        return createWebCrawlerTest(&quot;No suitable component '${requirements.name}' is found&quot;) {&#10;            SwingTest.checkExistence { requirements.suitableComponent }.toCheckResult()&#10;        }&#10;    }&#10;&#10;    return components.map(::generateExistenceTest)&#10;}&#10;&#10;fun componentsAreEnabledTests(vararg components: ComponentRequirements&lt;*&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    fun generateIsEnabledTest(requirements: ComponentRequirements&lt;*&gt;): TestCase&lt;WebCrawlerClue&gt; {&#10;        return if (requirements.isEnabled) {&#10;            createWebCrawlerTest(&quot;'${requirements.name}' should be enabled&quot;) {&#10;                val component = requireNotNull(requirements.suitableComponent) {&#10;                    &quot;Should check for the component existence before&quot;&#10;                }&#10;&#10;                return@createWebCrawlerTest component.isEnabled.toCheckResult()&#10;            }&#10;        } else {&#10;            createWebCrawlerTest(&quot;'${requirements.name}' should be disabled&quot;) {&#10;                val component = requireNotNull(requirements.suitableComponent) {&#10;                    &quot;Should check for the component existence before&quot;&#10;                }&#10;&#10;                return@createWebCrawlerTest (!component.isEnabled).toCheckResult()&#10;            }&#10;        }&#10;    }&#10;&#10;    return components.map(::generateIsEnabledTest)&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerLocalhostPages.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerLocalhostPages.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v4.mocks.web.WebPage&#10;import org.hyperskill.hstest.v4.mocks.web.WebServerMock&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;fun &lt;AttachType&gt; TestCase&lt;AttachType&gt;.withLocalhostPagesOn(port: Int): TestCase&lt;AttachType&gt; {&#10;    val webServerMock = WebServerMock(port).apply {&#10;        pages.forEach { _, (_, content, relativeUrl) -&gt;&#10;            setPage(relativeUrl,&#10;                    WebPage().setContent(content).setContentType(&quot;text/html&quot;)) }&#10;    }&#10;&#10;    return this.runWith(webServerMock)&#10;}&#10;&#10;data class PageProperties(val title: String, val content: String, val relativePath: String, val childUrls: Set&lt;String&gt;)&#10;&#10;val pages = mapOf(&#10;    localhost(PORT, &quot;/exampleDotCom&quot;) to PageProperties(&#10;        &quot;Example Domain&quot;,&#10;        &quot;&quot;&quot;&lt;!doctype html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Example Domain&lt;/title&gt;&#10;&#10;    &lt;meta charset=&quot;utf-8&quot; /&gt;&#10;    &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;&#10;    &lt;style type=&quot;text/css&quot;&gt;&#10;    body {&#10;        background-color: #f0f0f2;&#10;        margin: 0;&#10;        padding: 0;&#10;        font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;&#10;&#10;    }&#10;    div {&#10;        width: 600px;&#10;        margin: 5em auto;&#10;        padding: 50px;&#10;        background-color: #fff;&#10;        border-radius: 1em;&#10;    }&#10;    a:link, a:visited {&#10;        color: #38488f;&#10;        text-decoration: none;&#10;    }&#10;    @media (max-width: 700px) {&#10;        body {&#10;            background-color: #fff;&#10;        }&#10;        div {&#10;            width: auto;&#10;            margin: 0 auto;&#10;            border-radius: 0;&#10;            padding: 1em;&#10;        }&#10;    }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;&lt;div&gt;&#10;    &lt;h1&gt;Example of Example Domain&lt;/h1&gt;&#10;    &lt;p&gt;This domain is established to be used for illustrative examples in documents. You may use this&#10;    domain in examples without prior coordination or asking for permission.&lt;/p&gt;&#10;    &lt;p&gt;&lt;a href=&quot;unavailablePage&quot;&gt;More information...&lt;/a&gt;&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&quot;&quot;&quot;,&#10;        &quot;/exampleDotCom&quot;,&#10;        setOf(localhost(PORT, &quot;/unavailablePage&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular1&quot;) to PageProperties(&#10;        &quot;circular1tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular1tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular2&quot;&gt;link1&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular1&quot;,&#10;        setOf(localhost(PORT, &quot;/circular2&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular2&quot;) to PageProperties(&#10;        &quot;circular2tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular2tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular3&quot;&gt;link1&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular2&quot;,&#10;        setOf(localhost(PORT, &quot;/circular3&quot;))&#10;    ),&#10;    localhost(PORT, &quot;/circular3&quot;) to PageProperties(&#10;        &quot;circular3tiTle&quot;,&#10;        &quot;&quot;&quot;&#10;            |&lt;!doctype html&gt;&#10;            |&lt;html&gt;&#10;            |&lt;head&gt;&#10;            |&lt;title&gt;circular3tiTle&lt;/title&gt;&#10;            |&lt;/head&gt;&#10;            |&lt;body&gt;&#10;            |&lt;a href=&quot;circular1&quot;&gt;link&lt;/a&gt;&#10;            |&lt;a href=&quot;exampleDotCom&quot;&gt;link&lt;/a&gt;&#10;            |&lt;/body&gt;&#10;            |&lt;/html&gt;&#10;        &quot;&quot;&quot;.trimMargin(),&#10;        &quot;/circular3&quot;,&#10;        setOf(localhost(PORT, &quot;/circular1&quot;), localhost(PORT, &quot;/exampleDotCom&quot;))&#10;    )&#10;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage1Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage1Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage1Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val textArea = ComponentRequirements(&quot;TextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(textArea) +&#10;                componentsAreEnabledTests(textArea) +&#10;                stage1Tests(textAreaRequirements = textArea)&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage1Tests(textAreaRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;'${textAreaRequirements.name}' should contain text 'HTML code?'&quot;) {&#10;            val textArea = textAreaRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest (&quot;html code?&quot; in textArea.text()?.toLowerCase().orEmpty()).toCheckResult()&#10;        }&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage2Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage2Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage2Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val htmlText = ComponentRequirements(&quot;HtmlTextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(htmlText, urlText, getButton) +&#10;                componentsAreEnabledTests(htmlText, urlText, getButton) +&#10;                stage2Tests(&#10;                    htmlTextAreaRequirements = htmlText,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage2Tests(&#10;    htmlTextAreaRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;HTML code your app shows is wrong&quot;) {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val htmlTextArea = htmlTextAreaRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest pages&#10;                .asSequence()&#10;                .map { (url, pageProperties) -&gt;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    val textInTextArea = htmlTextArea.text().orEmpty()&#10;&#10;                    return@map htmlTextsAreEqual(pageProperties.content, textInTextArea)&#10;                }&#10;                .all { it }&#10;                .toCheckResult()&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage3Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage3Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JLabelFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.common.Utils.sleep&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage3Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val htmlText = ComponentRequirements(&quot;HtmlTextArea&quot;, isEnabled = false) { window.textBox(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(htmlText, urlText, getButton, titleLabel) +&#10;                componentsAreEnabledTests(htmlText, urlText, getButton, titleLabel) +&#10;                stage2Tests(&#10;                    htmlTextAreaRequirements = htmlText,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage3Tests(&#10;    titleLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest(&quot;Title your app shows is wrong&quot;) {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val titleLabel = titleLabelRequirements.requireExistingComponent()&#10;&#10;            return@createWebCrawlerTest pages&#10;                .asSequence()&#10;                .map { (url, pageProperties) -&gt;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    sleep(100)&#10;&#10;                    val titleInLabel = titleLabel.text().orEmpty()&#10;&#10;                    return@map titleInLabel == pageProperties.title&#10;                }&#10;                .all { it }&#10;                .toCheckResult()&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage4Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage4Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.JButtonFixture&#10;import org.assertj.swing.fixture.JTableFixture&#10;import org.assertj.swing.fixture.JTextComponentFixture&#10;import org.hyperskill.hstest.v4.common.Utils.sleep&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage4Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val titlesTable = ComponentRequirements(&quot;TitlesTable&quot;, isEnabled = false) { window.table(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(titlesTable, urlText, getButton, titleLabel) +&#10;                componentsAreEnabledTests(titlesTable, urlText, getButton, titleLabel) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage4Tests(&#10;                    titlesTableRequirements = titlesTable,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage4Tests(&#10;    titlesTableRequirements: ComponentRequirements&lt;JTableFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val titleTable = titlesTableRequirements.requireExistingComponent()&#10;&#10;            for (url in pages.keys) {&#10;                locationTextField.setText(url)&#10;&#10;                getTextButton.click()&#10;&#10;                sleep(100)&#10;&#10;                val contents = titleTable.contents()&#10;&#10;                if (contents.any { it.size != 2 }) {&#10;                    return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong columns number&quot;)&#10;                }&#10;&#10;                if (contents.size != url.deepUrls(depth = 1).size) {&#10;                    return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong rows number&quot; +&#10;                            &quot; have ${contents.size} should ${ url.deepUrls(depth = 1).size}&quot;)&#10;                }&#10;&#10;                for ((writtenUrl, writtenTitle) in contents) {&#10;                    if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                        return@createWebCrawlerTest fail(&quot;Table your app shows has a wrong row&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            return@createWebCrawlerTest CheckResult(true)&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage5Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage5Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.*&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;import java.io.File&#10;&#10;abstract class WebCrawlerStage5Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val titlesTable = ComponentRequirements(&quot;TitlesTable&quot;, isEnabled = false) { window.table(it) }&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.button(it) }&#10;        val titleLabel = ComponentRequirements(&quot;TitleLabel&quot;, isEnabled = true) { window.label(it) }&#10;        val saveButton = ComponentRequirements(&quot;ExportButton&quot;, isEnabled = true) { window.button(it) }&#10;        val pathToFileText = ComponentRequirements(&quot;ExportUrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +&#10;                componentsAreEnabledTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +&#10;                stage3Tests(&#10;                    titleLabelRequirements = titleLabel,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage4Tests(&#10;                    titlesTableRequirements = titlesTable,&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText&#10;                ) +&#10;                stage5Tests(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depth = 1&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;&#10;fun stage5Tests(&#10;    saveButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    savePathTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    depthTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;? = null,&#10;    depthCheckBoxRequirements: ComponentRequirements&lt;JCheckBoxFixture&gt;? = null,&#10;    parsedLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;? = null,&#10;    depth: Int&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;        createWebCrawlerTest {&#10;            val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;            val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;            val saveButton = saveButtonRequirements.requireExistingComponent()&#10;            val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()&#10;&#10;            val depthTextField = depthTextFieldRequirements?.requireExistingComponent()&#10;            val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()&#10;            val parsedLabel = parsedLabelRequirements?.requireExistingComponent()&#10;&#10;            for (url in pages.keys) {&#10;                depthTextField?.setText(&quot;$depth&quot;)&#10;                depthCheckBox?.enable()&#10;&#10;                locationTextField.setText(url)&#10;&#10;                getTextButton.click()&#10;&#10;                val fileName = File(&quot;&quot;).absolutePath + &quot;/temp.log&quot;&#10;&#10;                savePathTextField.setText(fileName)&#10;&#10;                saveButton.click()&#10;&#10;                val file = File(fileName)&#10;&#10;                if (!file.exists()) {&#10;                    return@createWebCrawlerTest fail(&quot;Your app doesn't create a file&quot;)&#10;                }&#10;&#10;                val contents = file.readText().lines().chunked(2).filter { it.size == 2 }&#10;                val deepUrls = url.deepUrls(depth)&#10;&#10;                if (contents.size != deepUrls.size) {&#10;                    return@createWebCrawlerTest fail(&quot;File your app saves has a wrong lines number&quot;)&#10;                }&#10;&#10;                if (contents.map { it.first() }.toSet() != deepUrls) {&#10;                    return@createWebCrawlerTest fail(&quot;File your app saves has a wrong child url&quot;)&#10;                }&#10;&#10;                for ((writtenUrl, writtenTitle) in contents) {&#10;                    if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong pair of lines&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            return@createWebCrawlerTest CheckResult(true)&#10;        }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;&#10;// TODO: Code duplicate!&#10;fun stage5TestsWithJToggleButton(&#10;    saveButtonRequirements: ComponentRequirements&lt;JButtonFixture&gt;,&#10;    getTextButtonRequirements: ComponentRequirements&lt;JToggleButtonFixture&gt;,&#10;    locationTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    savePathTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;,&#10;    depthTextFieldRequirements: ComponentRequirements&lt;JTextComponentFixture&gt;? = null,&#10;    depthCheckBoxRequirements: ComponentRequirements&lt;JCheckBoxFixture&gt;? = null,&#10;    parsedLabelRequirements: ComponentRequirements&lt;JLabelFixture&gt;? = null,&#10;    depth: Int&#10;): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;    return listOf(&#10;            createWebCrawlerTest {&#10;                val locationTextField = locationTextFieldRequirements.requireExistingComponent()&#10;                val getTextButton = getTextButtonRequirements.requireExistingComponent()&#10;                val saveButton = saveButtonRequirements.requireExistingComponent()&#10;                val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()&#10;&#10;                val depthTextField = depthTextFieldRequirements?.requireExistingComponent()&#10;                val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()&#10;                val parsedLabel = parsedLabelRequirements?.requireExistingComponent()&#10;&#10;                for (url in pages.keys) {&#10;                    depthTextField?.setText(&quot;$depth&quot;)&#10;                    depthCheckBox?.enable()&#10;&#10;                    locationTextField.setText(url)&#10;&#10;                    getTextButton.click()&#10;&#10;                    val fileName = File(&quot;&quot;).absolutePath + &quot;/temp.log&quot;&#10;&#10;                    savePathTextField.setText(fileName)&#10;&#10;                    saveButton.click()&#10;&#10;                    val file = File(fileName)&#10;&#10;                    if (!file.exists()) {&#10;                        return@createWebCrawlerTest fail(&quot;Your app doesn't create a file&quot;)&#10;                    }&#10;&#10;                    val contents = file.readText().lines().chunked(2).filter { it.size == 2 }&#10;                    val deepUrls = url.deepUrls(depth)&#10;&#10;                    if (contents.size != deepUrls.size) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong lines number&quot;)&#10;                    }&#10;&#10;                    if (contents.map { it.first() }.toSet() != deepUrls) {&#10;                        return@createWebCrawlerTest fail(&quot;File your app saves has a wrong child url&quot;)&#10;                    }&#10;&#10;                    val parsedCount = parsedLabel?.text()?.toIntOrNull()&#10;&#10;                    if (parsedCount != deepUrls.size) {&#10;                        return@createWebCrawlerTest fail(&quot;Parsed pages number your app shows is wrong&quot;)&#10;                    }&#10;&#10;                    for ((writtenUrl, writtenTitle) in contents) {&#10;                        if (pages.getValue(writtenUrl).title != writtenTitle) {&#10;                            return@createWebCrawlerTest fail(&quot;File your app saves has a wrong pair of lines&quot;)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                return@createWebCrawlerTest CheckResult(true)&#10;            }.withLocalhostPagesOn(PORT)&#10;    )&#10;}&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerStage6Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerStage6Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v4.stage.SwingTest&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;import crawler.WebCrawler&#10;&#10;abstract class WebCrawlerStage6Test : SwingTest&lt;WebCrawlerClue&gt;(WebCrawler()) {&#10;&#10;    override fun generateTestCases(): List&lt;TestCase&lt;WebCrawlerClue&gt;&gt; {&#10;        val urlText = ComponentRequirements(&quot;UrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val getButton = ComponentRequirements(&quot;RunButton&quot;, isEnabled = true) { window.toggleButton(it) }&#10;        val saveButton = ComponentRequirements(&quot;ExportButton&quot;, isEnabled = true) { window.button(it) }&#10;        val pathToFileText = ComponentRequirements(&quot;ExportUrlTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;&#10;        val depthText = ComponentRequirements(&quot;DepthTextField&quot;, isEnabled = true) { window.textBox(it) }&#10;        val depthCheckBox = ComponentRequirements(&quot;DepthCheckBox&quot;, isEnabled = true) { window.checkBox(it) }&#10;        val parsedLabel = ComponentRequirements(&quot;ParsedLabel&quot;, isEnabled = true) { window.label(it) }&#10;&#10;        return frameTests(::frame) +&#10;                existenceTests(urlText, getButton, saveButton, pathToFileText, depthText, depthCheckBox, parsedLabel) +&#10;                componentsAreEnabledTests(&#10;                    urlText,&#10;                    getButton,&#10;                    saveButton,&#10;                    pathToFileText,&#10;                    depthText,&#10;                    depthCheckBox,&#10;                    parsedLabel&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 1&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 2&#10;                ) +&#10;                stage5TestsWithJToggleButton(&#10;                    getTextButtonRequirements = getButton,&#10;                    locationTextFieldRequirements = urlText,&#10;                    saveButtonRequirements = saveButton,&#10;                    savePathTextFieldRequirements = pathToFileText,&#10;                    depthTextFieldRequirements = depthText,&#10;                    depthCheckBoxRequirements = depthCheckBox,&#10;                    parsedLabelRequirements = parsedLabel,&#10;                    depth = 100500&#10;                )&#10;    }&#10;&#10;    override fun check(reply: String, clue: WebCrawlerClue): CheckResult {&#10;        return checkWebCrawlerTest(reply = reply, clue = clue)&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/WebCrawlerUtil.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/WebCrawlerUtil.kt" />
                                <option name="text" value="package common&#10;&#10;import org.assertj.swing.fixture.AbstractJComponentFixture&#10;import org.assertj.swing.fixture.JCheckBoxFixture&#10;import org.hyperskill.hstest.v4.testcase.CheckResult&#10;import org.hyperskill.hstest.v4.testcase.TestCase&#10;&#10;const val PORT = 25555  // TODO: maybe use another port?&#10;&#10;class WebCrawlerClue(val feedback: String?, val checker: () -&gt; CheckResult)&#10;&#10;fun createWebCrawlerTest(feedback: String? = null, checker: () -&gt; CheckResult): TestCase&lt;WebCrawlerClue&gt; {&#10;    return TestCase&lt;WebCrawlerClue&gt;()&#10;        .setAttach(&#10;            WebCrawlerClue(&#10;                feedback = feedback,&#10;                checker = checker&#10;            )&#10;        )&#10;}&#10;&#10;fun checkWebCrawlerTest(reply: String, clue: WebCrawlerClue): CheckResult {&#10;    return try {&#10;        val (result, feedback) = clue.checker()&#10;&#10;        CheckResult(result, clue.feedback ?: feedback)&#10;    } catch (e: AssertionError) {&#10;        CheckResult(false, clue.feedback)&#10;    }&#10;}&#10;&#10;private operator fun CheckResult.component1() = isCorrect&#10;private operator fun CheckResult.component2() = feedback&#10;&#10;fun Boolean.toCheckResult() = CheckResult(this)&#10;&#10;fun fail(message: String) = CheckResult(false, message)&#10;&#10;fun htmlTextsAreEqual(source: String, inTextField: String): Boolean {&#10;    fun String.formatted(): String {&#10;        return this.trim().replace(&quot;\r\n&quot;, &quot;\n&quot;).replace(&quot;\r&quot;, &quot;\n&quot;)&#10;    }&#10;&#10;    return source.formatted() == inTextField.formatted()&#10;}&#10;&#10;fun &lt;ComponentType : AbstractJComponentFixture&lt;*, *, *&gt;&gt; ComponentRequirements&lt;ComponentType&gt;.requireExistingComponent(): ComponentType {&#10;    return requireNotNull(this.suitableComponent) {&#10;        &quot;Must check for the '${this.name}' component existence before this test&quot;&#10;    }&#10;}&#10;&#10;fun localhost(port: Int, url: String) = &quot;http://localhost:$port$url&quot;&#10;&#10;fun String.deepUrls(depth: Int): Set&lt;String&gt; {&#10;    fun String.childrenOrEmpty(): Set&lt;String&gt; {&#10;        val pageProperties = pages[this]&#10;&#10;        if (depth &lt; 0 || pageProperties == null) {&#10;            return emptySet()&#10;        }&#10;&#10;        return pageProperties.childUrls.filter { it in pages }.toSet()&#10;    }&#10;&#10;    var remainingDepth = depth - 1&#10;    val answer = this.childrenOrEmpty().toMutableSet()&#10;    while (remainingDepth &gt; 0) {&#10;        val next = answer.flatMap { it.childrenOrEmpty() } - answer&#10;&#10;        if (next.isEmpty()) {&#10;            break&#10;        }&#10;&#10;        answer.addAll(next)&#10;&#10;        --remainingDepth&#10;    }&#10;&#10;    return answer&#10;}&#10;&#10;fun JCheckBoxFixture.enable() {&#10;    if (!this.isEnabled) {&#10;        this.click()&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/crawler/ApplicationRunner.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/crawler/ApplicationRunner.java" />
                                <option name="text" value="package crawler;&#10;&#10;&#10;public class ApplicationRunner {&#10;    public static void main(String[] args) {&#10;        new WebCrawler();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/crawler/WebCrawler.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/crawler/WebCrawler.java" />
                                <option name="text" value="package crawler;&#10;&#10;import javax.swing.*;&#10;&#10;public class WebCrawler extends JFrame {&#10;    public WebCrawler() {&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setSize(300, 300);&#10;        setVisible(true);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1559843059000" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>